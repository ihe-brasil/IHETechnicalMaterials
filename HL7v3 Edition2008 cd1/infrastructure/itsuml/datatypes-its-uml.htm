<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head><script src="../../support/js/tree.js" type="text/javascript"></script><script src="../../support/js/setTopFrameText.js" type="text/javascript"></script><script src="../../support/js/swapcss.js" type="text/javascript"></script><script type="text/javascript">
			if (find('heading')) setHeadingTextFromFileName(document.location.href);
			</script><title>UML Implementation Technology Specification - Data Types</title>
      <link rel="stylesheet" type="text/css" href="../../support/css/v3m.css" title="v3m" />
   </head>
   <body>
      <div class="section">
         <h1>UML Implementation Technology Specification - Data Types</h1>
         <table cellspacing="0" cellpadding="3" border="1">
            <tr>
               <td align="center"><img src="../../support/graphics/ansilogo.gif" alt="ANSI" /><br />ANSI/HL7 V3 UMLITSDT, R1-2004<br />HL7 Version 3 Standard: UML Implementation Technology Specification - Data Types, Release 1<br />4/23/2004<img width="5" alt="spacer" src="../../support/graphics/spacer.gif" /></td>
            </tr>
         </table>
         <table style="border-width:0" width="100%" cellpadding="6">
            <tr>
               <td valign="top" align="left">Editor</td>
               <td valign="top" align="left">Grahame Grieve<br /><a href="mailto:grahame@kestral.com.au">grahame@kestral.com.au</a><br />Kestral Computing Pty. Ltd.
               </td>
            </tr>
            <tr>
               <td valign="top" align="left">Editor</td>
               <td valign="top" align="left">Gunther Schadow<br /><a href="mailto:gunther@aurora.rg.iupui.edu">gunther@aurora.rg.iupui.edu</a><br />Regenstrief Institute for Health Care
               </td>
            </tr>
         </table>
         <p class="copyright">Last Published: 05/29/2008 3:06 PM</p>
         <p class="copyright">HL7® Version 3 Standard, © 2008 Health 
            Level Seven®, Inc.  All Rights Reserved.
         </p>
         <p class="copyright">HL7 and Health Level Seven are registered 
            trademarks of Health Level Seven, Inc.  Reg. U.S. Pat &amp; TM Off
         </p>
         <hr title="Separator for header" />
         <div class="body">
            <div class="foundationtoc">
               <h2><a name="contents">Table of Contents</a></h2>
               
               <div class="toc1"><a href="#prefBegin">Preface</a></div>
               <div class="toc2">i  <a href="#ack">Acknowledgements</a></div>
               <div class="toc2">ii  <a href="#outstanding">Outstanding Issues</a></div>
               
               <div class="toc1">1  <a href="#intro">Introduction</a></div>
               <div class="toc2">1.1  <a href="#why">Why have a Data Types UML ITS?</a></div>
               <div class="toc2">1.2  <a href="#designgoals">Design Goals for the Data types UML ITS</a></div>
               
               <div class="toc1">2  <a href="#designissues">Design Issues</a></div>
               <div class="toc2">2.1  <a href="#umlversion">UML Version</a></div>
               <div class="toc2">2.2  <a href="#dtdequiv">Data Type Definition Language Equivalence</a></div>
               <div class="toc2">2.3  <a href="#classifiers">Classifiers and Operations</a></div>
               <div class="toc2">2.4  <a href="#flavorsofnull">Flavors of Null</a></div>
               <div class="toc2">2.5  <a href="#collections">Collections</a></div>
               <div class="toc2">2.6  <a href="#recursivedeclarations">Recursive Declarations</a></div>
               <div class="toc2">2.7  <a href="#mixins">Mix-ins</a></div>
               <div class="toc2">2.8  <a href="#codegeneration">Code Generation</a></div>
               
               <div class="toc1">3  <a href="#umldiagrams">UML Diagrams</a></div>
               <div class="toc2">3.1  <a href="#umlocldeclarations">The core UML / OCL kernel declarations</a></div>
               <div class="toc2">3.2  <a href="#corehl7datatypes">Core HL7 Data types</a></div>
               <div class="toc2">3.3  <a href="#textmultimedia">Text / Multimedia Types</a></div>
               <div class="toc2">3.4  <a href="#codeddata">Coded Data Types</a></div>
               <div class="toc2">3.5  <a href="#assortedothers">Assorted other types - Names, Identifiers, and Locations</a></div>
               <div class="toc2">3.6  <a href="#quantitytypes">Quantity Types</a></div>
               <div class="toc2">3.7  <a href="#generictypes">Generic Types</a></div>
               <div class="toc2">3.8  <a href="#mixinsgenerictypeextensions">Mix-ins (Generic Type Extensions)</a></div>
               <hr />
            </div>
            <div class="subSection">
               <div class="header">
                  <h3><a name="prefBegin">Preface</a></h3>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="ack"></a>i </span><span class="title">Acknowledgements</span></div>
               <div class="body">
                  <p>
                     Many individuals have contributed to the existence and content of this
                     specification. The editors would like to thank Thomas Beale (Deepthought
                     Informatics) for modeling assistance; Mark Shafarman (Oracle), Charlie
                     Mead (Oracle), Dale Nelson (ZedLogic), Dipak Kalra (UCL, OpenEHR) and
                     Tom Marley (Salford University, CEN) for ideas and encouragement, and
                     Bob Greenes and Margarita Sordo (Harvard Medical School) for breaking
                     this ground with the GELLO work.
                     
                  </p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="outstanding"></a>ii </span><span class="title">Outstanding Issues</span></div>
               <div class="body">
                  <ul style="margin-left:20px;">
                     <li>
                        <p>
                           CEN Request: differentiate between intrinsic and derived properties
                           
                        </p>
                     </li>
                     <li>
                        <p>
                           GELLO Requirement: Creating data types in queries. This is intended to be
                           handled by defining an operation with a class scope for each type. The
                           operation will take as a parameter a literal representation of the data
                           type. This requirement will be handled in the next version of this specification
                           
                        </p>
                     </li>
                  </ul>
               </div>
            </div>
            <hr title="Separator from body" />
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"><img src="../../support/graphics/NormativeStandard.gif" alt="NormativeStandard" /></span><span class="number"><a name="intro"></a>1 </span><span class="title">Introduction</span></div>
               <div class="body">
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="why"></a>1.1 </span><span class="title">Why have a Data Types UML ITS?</span></div>
                     <div class="body">
                        <p>
                           The Abstract Data Types specification defines the semantics of the HL7
                           Data Types, which are the foundation of all HL7 Version 3 artifacts,
                           including the Reference Information Model (RIM), Version 3 messaging
                           artifacts, and the Clinical Document Architecture (CDA). The Abstract
                           Data Types specification includes a Unified Modeling Language (UML)
                           diagram that presents the semantic declarations of these data types
                           in a standard UML fashion. 
                           
                        </p>
                        <p>
                           This UML ITS implements the semantics of the Abstract Data Types
                           specification using UML in such a way that HL7 data types are mapped
                           into the core UML and OCL kernel data types where such mappings are
                           appropriate. In addition, this representation uses only established
                           object-orientated formalisms. Since this specification shows how to
                           implement the HL7 data types using the UML core data types and
                           methodology, this specification is an ITS for the data types in
                           UML
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="designgoals"></a>1.2 </span><span class="title">Design Goals for the Data types UML ITS</span></div>
                     <div class="body">
                        <p>The desired outcomes from this specification include:</p>
                        <ul style="margin-left:20px;">
                           <li>
                              <p>A formally correct UML declaration of the HL7 Data Types</p>
                           </li>
                           <li>
                              <p>Enable the use of Computer-Aided Software Engineering (CASE) tools  
                                 	      for model validation, code generation, instance validation, etc
                              </p>
                           </li>
                           <li>
                              <p>Enable these same outcomes for downstream HL7 UML artifacts 
                                 	      such as the RIM and message structures
                              </p>
                           </li>
                        </ul>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"><img src="../../support/graphics/NormativeStandard.gif" alt="NormativeStandard" /></span><span class="number"><a name="designissues"></a>2 </span><span class="title">Design Issues</span></div>
               <div class="body">
                  <p>
                     A number of design issues are confronted by any specification wishing to
                     map the HL7 data types onto the UML data types.
                     
                  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="umlversion"></a>2.1 </span><span class="title">UML Version</span></div>
                     <div class="body">
                        <p>
                           This specification is based on the UML 2 standard. The UML version 2 is not 
                           fully released but the parts that this specification rests on, primarily the 
                           OCL part, have been released in their final form by the OMG 
                           [<a href="http://www.omg.org/technology/documents/modeling_spec_catalog.htm">http://www.omg.org/technology/documents/modeling_spec_catalog.htm</a>].
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="dtdequiv"></a>2.2 </span><span class="title">Data Type Definition Language Equivalence</span></div>
                     <div class="body">
                        <p>
                           The abstract data types specification includes many invariant statements.
                           Some of these invariant statements are used to make statements about the
                           mathematical functions of basic operations such as multiplication, etc.
                           A number of the statements are not relevent or not reproducible in OCL 
                           due to differences in approach between the 2 langauges. This specification 
                           attempts to reproduce only those OCL statements that have practical 
                           implications in HL7 usage.
                           
                        </p>
                        <p>
                           In addition, the abstract data types specification includes many statements
                           concerning ST literals and semantic meaning, which also are not reproduced in 
                           this specification. Readers should always consult the abstract data types 
                           specification for a full description of the behavior of the data
                           types.
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="classifiers"></a>2.3 </span><span class="title">Classifiers and Operations</span></div>
                     <div class="body">
                        <p>
                           All classifier and operation names are case sensitive.
                           
                        </p>
                        <p>
                           OCL declares a number of operations as infix operators. This list of
                           operations applies to any HL7 types, so that if such an operation is
                           declared on a tpye, it can be used as an infix operator. For example,
                           the abstract specification for the HL7 INT type includes a plus() 
                           operation. In this specification this is renamed to the OCL functional
                           equivalent operation, which is "+", so it is valid to write a + b = c
                           where a, b, and c are HL7 INT types
                           
                        </p>
                        <p>
                           In the OCL statements all operations used are shown with () according to the
                           formal OCL language. In some uses and OCL implementations these are not
                           required
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="flavorsofnull"></a>2.4 </span><span class="title">Flavors of Null</span></div>
                     <div class="body">
                        <p>
                           The HL7 Data types specification defines flavors of Null. Any data type
                           may have a flavor of Null and at the same time some of it's properties
                           may have a value that still has significance. OCL defines the concept
                           of void which maps to the application concept of a "null" or "nil" object.
                           Any object may be void, in which case any attempt to reference its properties
                           will also result in void. Although both UML and the HL7 abstract data types
                           define the concept of a null value with appropriate 3-valued logic, the
                           intent, implications and possible implementations clearly differ.
                           
                        </p>
                        <p>
                           In choosing how to implement the data types and deal with flavors of null,
                           the primary requirement was that an HL7 data type could continue to have
                           flavors of null, but any attempt to access the HL7 data type at the OCL
                           level would generate a void type if the HL7 type had a null value.
                           
                        </p>
                        <p>
                           The selected implementation meets these requirements. The pattern of
                           implementation for HL7 types with a direct equivalent in OCL is as
                           follows:
                           
                        </p>
                        <ul style="margin-left:20px;">
                           <li>
                              <p>
                                 Declare the HL7 type using the shortname and generalization from the abstract data type specification
                                 
                              </p>
                           </li>
                           <li>
                              <p>
                                 Declare all properties of the OCL type in the HL7 type, but with HL7 type equivalents for parameters and return values instead
                                 of OCL types
                                 
                              </p>
                           </li>
                           <li>
                              <p>
                                 Add any missing operations or semantics that are declared in the HL7 type but not in the OCL type
                                 
                              </p>
                           </li>
                           <li>
                              <p>
                                 Add an agreggation with cardinality 0..1 to the OCL type    
                                 
                              </p>
                           </li>
                           <li>
                              <p>
                                 Add a constraint that states that when the HL7 type is Null, then the aggregated OCL type is void    
                                 
                              </p>
                           </li>
                        </ul>
                        <p>
                           Note that this may mean that the UML "implementation" of an HL7 data type
                           may end up with more properties than in the abstract data type specification
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="collections"></a>2.5 </span><span class="title">Collections</span></div>
                     <div class="body">
                        <p>
                           The OCL Collections Sequence, Bag and Set map directly to the HL7 Data Types
                           LIST, BAG and SET. There is no HL7 equivalent for OrderedSet. Any operation
                           valid for an OCL collection is also valid for the HL7 Collection types. An
                           abstract type "COLL" has been introduced to match the OCL type collection.
                           
                        </p>
                        <p>
                           There is a subtle difference in semantics between the OCL type "Set" and the
                           HL7 SET. The HL7 SET can include non-discrete elements, but the OCL type can't.
                           This specification does not deal with this issue, and implementers should be
                           aware of this issue.
                           
                        </p>
                        <p>
                           Not all the correctness constraints from the OCL specification concerning the
                           collection operators have been reproduced in this specification but they should 
                           be assumed to apply
                           
                        </p>
                        <p>
                           The OCL Specification does not provide any guidance on the question of whether
                           all UML parameterised types should be treated as collections. For the purposes
                           of this ITS, any parameterised types are treated as collections by OCL
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="recursivedeclarations"></a>2.6 </span><span class="title">Recursive Declarations</span></div>
                     <div class="body">
                        <p>
                           Following the abstract specification, many declarations are recursive, with no
                           explicit termination of the recursion. For example, ST has an operation
                           language() : CS. Type CS has an operation code() : ST, etc. Where implementations
                           are invoking invariants on all instances as they are encountered, this recursion
                           will never terminate. Real world implementations will need to manage this recursion 
                           in some appropriate fashion. 
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="mixins"></a>2.7 </span><span class="title">Mix-ins</span></div>
                     <div class="body">
                        <p>
                           The Abstract Data Types specification declares some data types as generic type
                           extensions, also known as mix-ins. Mix-ins are generic data types that
                           specialize the type of their parameter rather than containing a value of the
                           parameter type. While this is a recognized pattern in object oriented
                           programming, there is no standard notation for depicting this behavior in 
                           the UML. In addition, this is not implemented in many current object oriented
                           programming languages. For this reason, a property expressing the type
                           has been used instead of a pure mix-in. 
                           
                        </p>
                        <p>
                           The mix-in types defined in this fashion have a flavor of null, but since this 
                           does not exist in the abstract specification, it should not carry a null flavor
                           
                        </p>
                        <p>
                           As described above, these mix-in types are treated as collections by OCL. 
                           These types carry an implicit constraint size() = 1; the have one and only 
                           one element of type T
                           
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="codegeneration"></a>2.8 </span><span class="title">Code Generation</span></div>
                     <div class="body">
                        <p>
                           It is intended that this notation should be suitable for code generation tools.
                           To that end, an XMI file including a full declaration of the types will be
                           included with future ballots.
                           
                        </p>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"><img src="../../support/graphics/NormativeStandard.gif" alt="NormativeStandard" /></span><span class="number"><a name="umldiagrams"></a>3 </span><span class="title">UML Diagrams</span></div>
               <div class="body">
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="umlocldeclarations"></a>3.1 </span><span class="title">The core UML / OCL kernel declarations</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-main.gif" alt="The core UML / OCL kernel declarations" /><br />The core UML / OCL kernel declarations<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="corehl7datatypes"></a>3.2 </span><span class="title">Core HL7 Data types</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-core.gif" alt="Core HL7 Data types" /><br />Core HL7 Data types<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="textmultimedia"></a>3.3 </span><span class="title">Text / Multimedia Types</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-text.gif" alt="Coded Data Types" /><br />Coded Data Types<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="codeddata"></a>3.4 </span><span class="title">Coded Data Types</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-cd.gif" alt="Coded Data Types" /><br />Coded Data Types<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="assortedothers"></a>3.5 </span><span class="title">Assorted other types - Names, Identifiers, and Locations</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-names.gif" alt="Names, Identifiers, and Locations" /><br />Names, Identifiers, and Locations<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="quantitytypes"></a>3.6 </span><span class="title">Quantity Types</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-qty.gif" alt="Quantity Types" /><br />Quantity Types<br /></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="generictypes"></a>3.7 </span><span class="title">Generic Types</span></div>
                     <div class="body"><a href="graphics/L-uml-its-generics.gif" target="_blank" style="border:0">Generic Types (link to graphic opens in a  new window)</a></div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="mixinsgenerictypeextensions"></a>3.8 </span><span class="title">Mix-ins (Generic Type Extensions)</span></div>
                     <div class="body"><br /><img class="graphic" src="graphics/uml-its-mixins.gif" alt="Mix-ins (Generic Type Extensions)" /><br />Mix-ins (Generic Type Extensions)<br /></div>
                  </div>
               </div>
            </div>
         </div>
         <p>
            <table>
               <tbody>
                  <tr>
                     <td><a class="custombutton" href="#top">Return to top of page</a></td>
                  </tr>
               </tbody>
            </table>
         </p>
      </div>
   </body>
</html>