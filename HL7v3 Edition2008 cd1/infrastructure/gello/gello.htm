<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
   <head><script src="../../support/js/tree.js" type="text/javascript"></script><script src="../../support/js/setTopFrameText.js" type="text/javascript"></script><script src="../../support/js/swapcss.js" type="text/javascript"></script><script type="text/javascript">
			if (find('heading')) setHeadingTextFromFileName(document.location.href);
			</script><title> GELLO: A Common Expression Language</title>
      <link rel="stylesheet" type="text/css" href="../../support/css/v3m.css" title="v3m" />
   </head>
   <body>
      <div class="section">
         <h1> GELLO: A Common Expression Language</h1>
         <table cellspacing="0" cellpadding="3" border="1">
            <tr>
               <td align="center"><img src="../../support/graphics/ansilogo.gif" alt="ANSI" /><br />ANSI/HL7 V3 GELLO, R1-2005<br />GELLO: A Common Expression Language, Release 1<br />5/26/2005<img width="5" alt="spacer" src="../../support/graphics/spacer.gif" /></td>
            </tr>
         </table>
         <table style="border-width:0" width="100%" cellpadding="6">
            <tr>
               <td valign="top" align="left">Principal Contributor</td>
               <td valign="top" align="left">Margarita Sordo, Ph.D<br /><a href="mailto:msordo@dsg.harvard.edu">msordo@dsg.harvard.edu</a><br />Decision Systems Group, Brigham &amp; Women&#8217;s Hospital, 
                  				Harvard Medical School, Boston, MA
               </td>
            </tr>
            <tr>
               <td valign="top" align="left">Principal Contributor</td>
               <td valign="top" align="left">Omolola Ogunyemi, Ph.D.<br /><a href="mailto:oogunyem@dsg.harvard.edu">oogunyem@dsg.harvard.edu</a><br />Decision Systems Group, Brigham &amp; Women&#8217;s Hospital, 
                  				Harvard Medical School, Boston, MA
               </td>
            </tr>
            <tr>
               <td valign="top" align="left">Principal Contributor</td>
               <td valign="top" align="left">Aziz A. Boxwala, M.B.B.S., Ph.D.<br /><a href="mailto:Aziz.Boxwala@eclipsys.com">Aziz.Boxwala@eclipsys.com</a><br />Eclipsys
               </td>
            </tr>
            <tr>
               <td valign="top" align="left">Principal Contributor</td>
               <td valign="top" align="left">Robert A. Greenes, M.D., Ph.D.<br /><a href="mailto:greenes@harvard.edu">greenes@harvard.edu</a><br />Decision Systems Group, Brigham &amp; Women&#8217;s Hospital, 
                  				Harvard Medical School, Boston, MA
               </td>
            </tr>
            <tr>
               <td valign="top" align="left">Contributor</td>
               <td valign="top" align="left">Samson Tu<br /><a href="mailto:tu@SMI.Stanford.EDU">tu@SMI.Stanford.EDU</a><br />SMI, Stanford University School of Medicine, Stanford, CA
               </td>
            </tr>
         </table>
         <p class="copyright">Last Published: 05/27/2008 4:31 PM</p>
         <p class="copyright">HL7® Version 3 Standard, © 2008 Health 
            Level Seven®, Inc.  All Rights Reserved.
         </p>
         <p class="copyright">HL7 and Health Level Seven are registered 
            trademarks of Health Level Seven, Inc.  Reg. U.S. Pat &amp; TM Off
         </p>
         <hr title="Separator for header" />
         <div class="body">
            <div class="foundationtoc">
               <h2><a name="contents">Table of Contents</a></h2>
               
               <div class="toc1"><a href="#prefBegin">Preface</a></div>
               <div class="toc2">i  <a href="#prefChange">Changes from Previous Release</a></div>
               
               <div class="toc1">1  <a href="#CTSIntro">Introduction</a></div>
               <div class="toc2">1.1  <a href="#WhatIsGello">What is GELLO?</a></div>
               
               <div class="toc1">2  <a href="#ReqsForExpLang">Requirements for an Expression Language in the Clinical Context</a></div>
               <div class="toc2">2.1  <a href="#NonFuncReq">Non-Functional Requirements</a></div>
               <div class="toc2">2.2  <a href="#UseCases">Use Cases</a></div>
               <div class="toc2">2.3  <a href="#ClinicalDataModel">A Clinical Decision Support Data Model</a></div>
               <div class="toc2">2.4  <a href="#ExpressionsAndGuidelines">Expressions and Clinical Guidelines</a></div>
               
               <div class="toc1">3  <a href="#GELLOgoalsProp">GELLO: Goals and Properties</a></div>
               
               <div class="toc1">4  <a href="#OCL">OCL</a></div>
               <div class="toc2">4.1  <a href="#WhyOCL">Why OCL?</a></div>
               
               <div class="toc1">5  <a href="#GELLO">GELLO</a></div>
               <div class="toc2">5.1  <a href="#GELLOtypes">GELLO Types</a></div>
               <div class="toc3">5.1.1  <a href="#BasicTypes">Basic Types</a></div>
               <div class="toc3">5.1.2  <a href="#ModelTypes">Model Types</a></div>
               <div class="toc3">5.1.3  <a href="#CollectionTypes">Collection Types</a></div>
               <div class="toc3">5.1.4  <a href="#TupleType">Tuple Type</a></div>
               <div class="toc3">5.1.5  <a href="#EnumTypes">Enumeration Types</a></div>
               <div class="toc2">5.2  <a href="#Names">Names</a></div>
               <div class="toc2">5.3  <a href="#Properties">Properties</a></div>
               <div class="toc3">5.3.1  <a href="#Attributes">Attributes</a></div>
               <div class="toc3">5.3.2  <a href="#Operations">Operations</a></div>
               <div class="toc2">5.4  <a href="#ContextRefs">Context and References to Contextual Instances</a></div>
               <div class="toc3">5.4.1  <a href="#ContextSelf">Context, Self and Implicit References to Contextual Instances</a></div>
               <div class="toc3">5.4.2  <a href="#PackContext">Package Context and Pathname</a></div>
               <div class="toc3">5.4.3  <a href="#NavAssoc">Navigation through Associations</a></div>
               <div class="toc2">5.5  <a href="#VarDec">Variable Declaration</a></div>
               <div class="toc3">5.5.1  <a href="#RefsClass">Declaring References to Instances of Classes</a></div>
               <div class="toc3">5.5.2  <a href="#Scope">Scope of Declarations</a></div>
               <div class="toc2">5.6  <a href="#DefConst"> &lt;&lt;definition&gt;&gt; Constraint</a></div>
               <div class="toc2">5.7  <a href="#Reflection">Reflection</a></div>
               <div class="toc2">5.8  <a href="#Casting">Casting</a></div>
               <div class="toc2">5.9  <a href="#BuiltInOps">Built-in Operators</a></div>
               <div class="toc3">5.9.1  <a href="#ArithOps">Arithmetic Operators "+", "-", "*"</a></div>
               <div class="toc3">5.9.2  <a href="#divOp">Arithmetic Operator "/"</a></div>
               <div class="toc3">5.9.3  <a href="#modOp">Arithmetic Operators "div" and "mod"</a></div>
               <div class="toc3">5.9.4  <a href="#unaryMinusOp">Arithmetic Operator unary minus "-"  </a></div>
               <div class="toc3">5.9.5  <a href="#compOps">Comparison Operators "=", "&gt;", "&lt;", "&gt;=", "&lt;=", "&lt;&gt;"</a></div>
               <div class="toc3">5.9.6  <a href="#absMathOp"> Mathematical Operator "abs"</a></div>
               <div class="toc3">5.9.7  <a href="#acosMathOp"> Mathematical Operator "acos"</a></div>
               <div class="toc3">5.9.8  <a href="#asinMathOp"> Mathematical Operator "asin"</a></div>
               <div class="toc3">5.9.9  <a href="#atanMathOp"> Mathematical Operator "atan"</a></div>
               <div class="toc3">5.9.10  <a href="#ceilingMathOp"> Mathematical Operator "ceiling"</a></div>
               <div class="toc3">5.9.11  <a href="#cosMathOp"> Mathematical Operator "cos"</a></div>
               <div class="toc3">5.9.12  <a href="#expMathOp"> Mathematical Operator "exp"</a></div>
               <div class="toc3">5.9.13  <a href="#floorMathOp"> Mathematical Operator "floor"</a></div>
               <div class="toc3">5.9.14  <a href="#logMathOp"> Mathematical Operator "log"</a></div>
               <div class="toc3">5.9.15  <a href="#maxMathOp"> Mathematical Operator "max"</a></div>
               <div class="toc3">5.9.16  <a href="#minMathOp"> Mathematical Operator "min"</a></div>
               <div class="toc3">5.9.17  <a href="#powMathOp"> Mathematical Operator "power"</a></div>
               <div class="toc3">5.9.18  <a href="#randMathOp"> Mathematical Operator "rand"</a></div>
               <div class="toc3">5.9.19  <a href="#sinMathOp"> Mathematical Operator "sin"</a></div>
               <div class="toc3">5.9.20  <a href="#sqrtMathOp"> Mathematical Operator "sqrt"</a></div>
               <div class="toc3">5.9.21  <a href="#tanMathOp"> Mathematical Operator "tan"</a></div>
               <div class="toc3">5.9.22  <a href="#BooleanOps">Boolean Operators</a></div>
               <div class="toc3">5.9.23  <a href="#StringOps">String Operators "size", "concat", "toUpper", "toLower" "substring", "=" and "&lt;&gt;"</a></div>
               <div class="toc3">5.9.24  <a href="#StringOps2">String Operators "tochar", "lpad", "rpad", "rtrim", "ltrim" and "replace"</a></div>
               <div class="toc2">5.10  <a href="#CollOps">Collection Operators</a></div>
               <div class="toc3">5.10.1  <a href="#ArrowNotation">The &#8216;Arrow&#8217; Notation</a></div>
               <div class="toc3">5.10.2  <a href="#SingleInstances">Single Instances as Collections</a></div>
               <div class="toc3">5.10.3  <a href="#OpSelect">Operator Select</a></div>
               <div class="toc3">5.10.4  <a href="#OpReject">Operator Reject  </a></div>
               <div class="toc3">5.10.5  <a href="#OpCollect">Operator Collect </a></div>
               <div class="toc3">5.10.6  <a href="#OpForAll">Operator ForAll  </a></div>
               <div class="toc3">5.10.7  <a href="#OpIterate">Operator Iterate</a></div>
               <div class="toc3">5.10.8  <a href="#OpExists">Operator Exists</a></div>
               <div class="toc3">5.10.9  <a href="#OpFlatten">Operator Flatten</a></div>
               <div class="toc3">5.10.10  <a href="#OpSize">Operator Size</a></div>
               <div class="toc3">5.10.11  <a href="#OpCount">Operator Count</a></div>
               <div class="toc3">5.10.12  <a href="#OpMinMax">Operators "Max" and "Min"</a></div>
               <div class="toc3">5.10.13  <a href="#OpIncludes">Operator Includes</a></div>
               <div class="toc3">5.10.14  <a href="#OpIncludesAll">Operator IncludesAll</a></div>
               <div class="toc3">5.10.15  <a href="#OpIsEmpty">Operator IsEmpty</a></div>
               <div class="toc3">5.10.16  <a href="#OpNotEmpty">Operator notEmpty</a></div>
               <div class="toc3">5.10.17  <a href="#OpSum">Operator Sum</a></div>
               <div class="toc3">5.10.18  <a href="#OpFirstN">Operator FirstN</a></div>
               <div class="toc3">5.10.19  <a href="#OpLastN">Operator LastN</a></div>
               <div class="toc3">5.10.20  <a href="#OpElemAt">Operator ElemAt</a></div>
               <div class="toc3">5.10.21  <a href="#OpReverse">Operator Reverse</a></div>
               <div class="toc3">5.10.22  <a href="#OpSortBy">Operator SortBy</a></div>
               <div class="toc3">5.10.23  <a href="#OpIntersec">Operator Intersection</a></div>
               <div class="toc3">5.10.24  <a href="#OpUnion">Operator Union</a></div>
               <div class="toc3">5.10.25  <a href="#OpIncluding">Operator Including</a></div>
               <div class="toc3">5.10.26  <a href="#OpExcluding">Operator Excluding</a></div>
               <div class="toc3">5.10.27  <a href="#OpJoin">Operator Join</a></div>
               <div class="toc3">5.10.28  <a href="#OpAverage">Operator Average</a></div>
               <div class="toc3">5.10.29  <a href="#OpStdev">Operator Stdev</a></div>
               <div class="toc3">5.10.30  <a href="#OpVariance">Operator Variance</a></div>
               <div class="toc3">5.10.31  <a href="#OpMedian">Operator Median</a></div>
               <div class="toc3">5.10.32  <a href="#OpMode">Operator Mode</a></div>
               <div class="toc3">5.10.33  <a href="#OpLike">Operator Like</a></div>
               <div class="toc3">5.10.34  <a href="#OpNotLike">Operator NotLike</a></div>
               <div class="toc3">5.10.35  <a href="#OpBetween">Operator Between</a></div>
               <div class="toc3">5.10.36  <a href="#OpDistinct">Operator Distinct</a></div>
               <div class="toc2">5.11  <a href="#TupleOps">Tuple Operators</a></div>
               <div class="toc3">5.11.1  <a href="#TupleSize">Operator Size</a></div>
               <div class="toc3">5.11.2  <a href="#TupleGetValue">Operator getValue</a></div>
               <div class="toc3">5.11.3  <a href="#TupleGetElemName">Operator getElemName</a></div>
               <div class="toc3">5.11.4  <a href="#TupleGetElemType">Operator getElemType</a></div>
               <div class="toc2">5.12  <a href="#section-Date/Time-Operators">Date/Time Operators</a></div>
               <div class="toc3">5.12.1  <a href="#ToDate">Operator ToDate</a></div>
               <div class="toc3">5.12.2  <a href="#AddMonthsDateNextDay">Operator AddMonths, AddDate and NextDay</a></div>
               <div class="toc3">5.12.3  <a href="#LastDay">Operator LastDay</a></div>
               <div class="toc2">5.13  <a href="#Precedence">Precedence Rules</a></div>
               <div class="toc2">5.14  <a href="#IfExp">If Expression</a></div>
               
               <div class="toc1">6  <a href="#GELLOSyntax">GELLO Syntax</a></div>
               <div class="toc2">6.1  <a href="#InfTypes">Inferring Type Rules for Expressions</a></div>
               <div class="toc2">6.2  <a href="#LexGram">GELLO Lexical Grammar</a></div>
               <div class="toc2">6.3  <a href="#BNF">GELLO BNF Syntax</a></div>
               <div class="toc3">6.3.1  <a href="#RootSymbol"> Root Symbol</a></div>
               <div class="toc3">6.3.2  <a href="#Literals">Literals</a></div>
               <div class="toc3">6.3.3  <a href="#DataTypes">Data Types</a></div>
               <div class="toc3">6.3.4  <a href="#Names">Names</a></div>
               <div class="toc3">6.3.5  <a href="#Expressions">Expressions</a></div>
               <div class="toc3">6.3.6  <a href="#Statements">Statements</a></div>
               <div class="toc3">6.3.7  <a href="#RefInstanceClass">Reference to an Instance of a  Model Class</a></div>
               <div class="toc3">6.3.8  <a href="#LitAndIDs">Literals and Identifiers</a></div>
               <div class="toc3">6.3.9  <a href="#ReservedWords">Reserved Words</a></div>
               <div class="toc3">6.3.10  <a href="#Operators">Operators</a></div>
               <div class="toc3">6.3.11  <a href="#StatementOps">Statements</a></div>
               <div class="toc2">6.4  <a href="#GELLOexps">GELLO Expressions</a></div>
               <div class="toc2">6.5  <a href="#TypeOfExp">Type of an Expression</a></div>
               <div class="toc2">6.6  <a href="#Termination">Normal and Abrupt Completion of Evaluation</a></div>
               <div class="toc3">6.6.1  <a href="#TypeCheck">Type Checking</a></div>
               <div class="toc3">6.6.2  <a href="#Handling">Handling Exceptions</a></div>
               <div class="toc2">6.7  <a href="#EvalExps">Evaluation of Expressions</a></div>
               <div class="toc3">6.7.1  <a href="#ArgList">Argument List</a></div>
               <div class="toc2">6.8  <a href="#ExampleExps">Example of Expressions</a></div>
               
               <div class="toc1">7  <a href="#ExampleGELLO">Examples in GELLO</a></div>
               <div class="toc2">7.1  <a href="#MLMGELLO">An MLM into GELLO</a></div>
               <div class="toc2">7.2  <a href="#ItExample">Example of an iteration over more than one collection at a time</a></div>
               <div class="toc2">7.3  <a href="#ExampleNumber">Example: Number of current anti-hypertensive Medications &gt; 1</a></div>
               <div class="toc2">7.4  <a href="#Example3rdDose">3rd Td dose before 12 months of age</a></div>
               
               <div class="toc1">8  <a href="#GroupingGELLOexpressionsintoModelProcesses">Grouping GELLO expressions into Model Processes</a></div>
               
               <div class="toc1">9  <a href="#Ack">Acknowledgements</a></div>
               
               <div class="toc1">10  <a href="#References">References</a></div>
               <h3>Appendices</h3>
               
               <div class="toc1">A  <a href="#annexA">Annex A: HL7v3DataTypes</a></div>
               
               <div class="toc1">B  <a href="#annexB">Annex B: The HL7 Reference Information Model</a></div>
               
               <div class="toc1">C  <a href="#annexC">Annex C: The core UML OCL kernel declarations</a></div>
               
               <div class="toc1">D  <a href="#annexD">Annex D: A Simplified Data Model</a></div>
               
               <div class="toc1">E  <a href="#annexE">Annex E: Temporal Relations and Temporal Intervals</a></div>
               <div class="toc2">E.1  <a href="#before">Before</a></div>
               <div class="toc2">E.2  <a href="#after">After</a></div>
               <div class="toc2">E.3  <a href="#Meets">Meets</a></div>
               <div class="toc2">E.4  <a href="#MetBy">Met-By</a></div>
               <div class="toc2">E.5  <a href="#Overlaps">Overlaps</a></div>
               <div class="toc2">E.6  <a href="#overlapped">Overlapped-by</a></div>
               <div class="toc2">E.7  <a href="#Starts">Starts</a></div>
               <div class="toc2">E.8  <a href="#StartedBy">Started-by</a></div>
               <div class="toc2">E.9  <a href="#During">During</a></div>
               <div class="toc2">E.10  <a href="#Contains">Contains</a></div>
               <div class="toc2">E.11  <a href="#Finishes">Finishes</a></div>
               <div class="toc2">E.12  <a href="#FinishedBy">Finished-by</a></div>
               <div class="toc2">E.13  <a href="#Equals">Equals</a></div>
               <hr />
            </div>
            <div class="subSection">
               <div class="header">
                  <h3><a name="prefBegin">Preface</a></h3>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="prefChange"></a>i </span><span class="title">Changes from Previous Release</span></div>
               <div class="body">
                  <p>
                     			Many thanks to all CDS TC members and all the people from other HL7 TCs for their valuable comments.
                     			
                  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="IssuesAddressedAfterJan2005"></a>i - a </span><span class="title">Issues Addressed after January 2005 Membership Ballot</span></div>
                     <div class="body"><a name="RevHistory"></a><table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <tr>
                              <th colspan="1">Issue</th>
                              <th colspan="1">Action</th>
                           </tr>
                           <tr>
                              <td colspan="1">Change title of Section 2.1 from functional requirements to technical requirements</td>
                              <td colspan="1">Section 2.1 title changed to nonfunctional requirements</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 2.2 include researcher, epidemiologist, health economist as potential actors for use cases</td>
                              <td colspan="1">Actors included and use cases expanded.</td>
                           </tr>
                           <tr>
                              <td colspan="1">Typos in Section 2.4 and 4</td>
                              <td colspan="1">Corrected</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 5.4.1 last expression needs explanation</td>
                              <td colspan="1">Explanation added</td>
                           </tr>
                           <tr>
                              <td colspan="1">Request for adding String/date functions: tochar(), todate(), LPAD(), RPAD(), RTRIM(), LTRIM(), Replace(), Translate(), Length(),
                                 AddMonths(), AddDate(), LastDay(), NextDay(), MonthsBetween(). Statistical functions. Trigonometric functions. Logaritmic
                                 functions. Other mathematical functions: Ceiling(), Floor(), Abs(), Sqt(). Other functions: NULL(), Like(), NotLIke(), Difference(),
                                 Any(), InBetween().
                              </td>
                              <td colspan="1">The requested functions were added to GELLO syntax. All these operations are side-effect free. If needed, the resulting value
                                 must be bound to a variable. Further requests for adding operators should follow the mechanisms outlined in the document "Mechanisms
                                 for adding functions to GELLO language", that was approved by the CDS TC in February 2005 - See link below immediately after
                                 this table.   
                                 							
                                 <ul>
                                    <li>GELLO already supports the NULL() operator (See Section 5.1.1.5). </li>
                                    <li>The added mathematical (includes mathematical, trigonometric and logaritmic) functions are in Sections 5.9.6 to 5.9.21.  </li>
                                    <li>Although statistical operators are supported by the RIM, they were added to GELLO as built in operators for collections. See
                                       Sections 5.10.28  to 5.10.32.  
                                    </li>
                                    <li>Various string functions were added in Section 5.9.24. the operator lenght() was not added because is equivalent to the string
                                       operator size().
                                    </li>
                                    <li>Date/time operators were added to Section 5.12. Note that several requested operations are supported by the RIM, so they were
                                       not added to GELLO.
                                    </li>
                                    <li> operations "any" and "in" already exist in GELLO as part of the collection operators "exists" and "includes" respectively</li>
                                    <li>like(), notlike(), distinct(), between() were added to the collection operators. Sections 5.10.33 to 5.10.36</li>
                                 </ul>
                              </td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 5.11.4 replace "the following example returns 3" with "the following example returns 2"</td>
                              <td colspan="1">Replaced</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 5.11.5 replace "getElemType(3)" with  "getElemType(2)"</td>
                              <td colspan="1">Replaced</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 6.3.7 too many ""</td>
                              <td colspan="1">Corrected</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 7.1 replace "lastPhosphate..value" with "lastPhosphate.value"</td>
                              <td colspan="1">Corrected</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 7.3 correct "SNOMED-CT, 1182007" with "SNOMED-CT", "1182007"</td>
                              <td colspan="1">Corrected</td>
                           </tr>
                           <tr>
                              <td colspan="1">Section 7.4 correct ""SNOMED-CT" with "SNOMED-CT"</td>
                              <td colspan="1">Corrected</td>
                           </tr>
                           <tr>
                              <td colspan="1">Suggestion: GELLO should progress as a DSTU pending further collaborative work with OMG.In particular, GELLO's combined subsetting
                                 and extension of OCL is a situation that requires resolution in collaboration with OMG. A solution must be found that provides
                                 a well-defined conformance level for GELLO applications with respect to OMG standard OCL.
                              </td>
                              <td colspan="1">The general consensus among voters is that it is best first to standarize GELLO and then work OMG so OCL and GELLO will evolve
                                 together through a working relationship. This issue is being pursued by members of the CDS TC and other TC and SIG groups
                                 within HL7.
                              </td>
                           </tr>
                        </table>
                        <p></p>
                        <p>For "Mechanisms for adding functions to GELLO" document <a href="Mechanisms for adding functions to GELLO1.pdf">[CLICK HERE]</a></p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="IssuesAddressedAfterAug2004"></a>i - b </span><span class="title">Issues Addressed after August 2004 Ballot</span></div>
                     <div class="body">
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <tr>
                              <th colspan="1">Issue</th>
                              <th colspan="1">Action</th>
                           </tr>
                           <tr>
                              <td colspan="1">User-defined 'macros'</td>
                              <td colspan="1">Section "Grouping GELLO expressions into Model Processes" added explaining how to define such user-defined  processes.</td>
                           </tr>
                           <tr>
                              <td colspan="1">HL7 has just signed an organizational affiliate agreement with OMG, and as part of this agreement we (HL7) can interact directly
                                 with the authors of the UML and OCL specifications. So one question that GELLO could ask is: can the non-OCL parts of the
                                 GELLO specification be added to OCL so that GELLO becomes a strict subset of OCL? This would enhance the interoperability
                                 of the two.
                              </td>
                              <td colspan="1">We will seek to identify points of contact and pursue. We are looking to align with OMG standards as a future continuing activity.</td>
                           </tr>
                           <tr>
                              <td colspan="1">Minor comments</td>
                              <td colspan="1">Direct response to contributors</td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="IssuesAddressedAfterMay2004"></a>i - c </span><span class="title">Issues Addressed after May 2004 Ballot</span></div>
                     <div class="body">
                        <p><a name="IssuesMay04"></a></p>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <tr>
                              <th colspan="1">From: Samson Tu</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GELLO can be used with any OO data model</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">1.2, 2.3 </td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Distinction between query and expression </td>
                              <td colspan="1">Removed</td>
                              <td colspan="1">1, 1.2, 2.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; No specific reference to the vMR</td>
                              <td colspan="1">All references removed</td>
                              <td colspan="1">&#8206;2.3&#8206;, 3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Definition of variables </td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">&#8206;5.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Reference to Factory methods rephrased</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">&#8206;5.5.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Use cases </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;2.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Distinction between method and operation </td>
                              <td colspan="1">Clarified</td>
                              <td colspan="1">&#8206;5.3.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Clarification of context condition</td>
                              <td colspan="1">Clarified</td>
                              <td colspan="1">&#8206;5.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Examples of operators </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;5.9, &#8206;5.10, &#8206;5.11</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Time interval definition </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;5.12</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GELLO BNF </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;6.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; OWL wording </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;4.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Context statements</td>
                              <td colspan="1">Added and revised</td>
                              <td colspan="1">5.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Query section merged into Expression section</td>
                              <td colspan="1">Removed</td>
                              <td colspan="1">7</td>
                           </tr>
                           <tr>
                              <th colspan="1">From: Samson Tu: Requested after reviewing the document sent for revision (July 26, 2004)</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Change IsQuery to true</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">2.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Remove refs to MLMs in Figure 1 and caption</td>
                              <td colspan="1">Removed</td>
                              <td colspan="1">3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Rephrase "Why OCL?" section</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">4.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Rephrase "Why GELLO?"</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">4.1, 5.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Rephrase GELLO "basic" types into "predefined" types</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">5.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; "Predefined types include basic, collection and tuple"</td>
                              <td colspan="1">Added</td>
                              <td colspan="1">5.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Basic types</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.1.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Names decription</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Attributes description</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.3.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Properties description</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Operations description</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.3.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Variable declaration</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Remove reference to Arden Syntax from Scope of declaration section</td>
                              <td colspan="1">Removed</td>
                              <td colspan="1">5.5.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Change "basic" type for "built-in" type</td>
                              <td colspan="1">Changed</td>
                              <td colspan="1">5.8</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Explain context in select example</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">5.10.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Collect notation</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Collect example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; ForAll definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.6</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Iterate definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.7</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Iterate example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.7</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Exists definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.8</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Flatten definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.9</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Count example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.11</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Includes example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.13</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; IncludesAll example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.14</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; FirstN defintion</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.18</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Intersection example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.23</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Union definition </td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.24</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Including definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.10.25</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Join example</td>
                              <td colspan="1">Modified</td>
                              <td colspan="1">5.10.27</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GetValue definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.11.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GetElem definition</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">5.11.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Temporal Ops section</td>
                              <td colspan="1">Moved to Annex E</td>
                              <td colspan="1">Annex E</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Inferring type of rules fro expressions</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">6.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Collection literal</td>
                              <td colspan="1">Added to GELLO BNF</td>
                              <td colspan="1">6.3.2, 6.3.8</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Tuple literal</td>
                              <td colspan="1">Added to GELLO BNF</td>
                              <td colspan="1">6.3.8</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Type of an expression</td>
                              <td colspan="1">Rephrased</td>
                              <td colspan="1">7.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Remove MLM into GELLO example</td>
                              <td colspan="1">Not Done. Example added at Eclipsys </td>
                              <td colspan="1">8.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Example: presence of Azotemia&#8230; change "equal" for "implies"</td>
                              <td colspan="1">Changed</td>
                              <td colspan="1">8.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Example: Number of current&#8230; change "equal" for "implies"</td>
                              <td colspan="1">Changed</td>
                              <td colspan="1">8.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Example: 3rd dose&#8230; change "equal" for "implies</td>
                              <td colspan="1">Changed</td>
                              <td colspan="1">8.5</td>
                           </tr>
                           <tr>
                              <th colspan="1">From: Grahame Grieve</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Document format in accordance with HL7 requirements: including copyright </td>
                              <td colspan="1">This is on its way with the collaboration of the HL7 V3 publishing people</td>
                              <td colspan="1"></td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; OCL specification removed</td>
                              <td colspan="1">All section removed</td>
                              <td colspan="1"></td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Remove all references to a vMR </td>
                              <td colspan="1">Removed. No reference vMR documentation is included because there&#8217;s no such formal document yet</td>
                              <td colspan="1">2.3, 3 </td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add self and Implicit references to objects </td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.4.1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add Package context </td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.4.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add Enumeration types </td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.1.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add definition constraints</td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.6</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add Pathnames for packages</td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.4.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add Associations </td>
                              <td colspan="1">Added and in compliance with OCL specification</td>
                              <td colspan="1">5.4.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Instances of classes and Factory method</td>
                              <td colspan="1">It is assumed that the RIM will provide the mechanisms for creating instances of classes, through 
                                 					the Factory method, which takes a list of arguments as a string literal &#8211;as discussed with Gunther Schadow.
                              </td>
                              <td colspan="1">5.5 </td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Literal format for tuples </td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.1.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Name definition</td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Method and operation </td>
                              <td colspan="1">Clarified</td>
                              <td colspan="1">5.3.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Context definition </td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Variable declaration </td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Examples for operators </td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.9, &#8206;5.10&#8206;, 5.11</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; he wording for definition of operators </td>
                              <td colspan="1">Reviewed</td>
                              <td colspan="1">5.3.2</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; 'Temporal' classes and the RIM </td>
                              <td colspan="1">It is assumed that 'temporal' classes in the RIM will provide the necessary temporal operators. 
                                 					This might need to be further discussed with Gunther
                              </td>
                              <td colspan="1">5.12</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Correct UML diagram in appendix</td>
                              <td colspan="1">Diagram changed</td>
                              <td colspan="1">Appendix C</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GELLO BNF </td>
                              <td colspan="1">Revised</td>
                              <td colspan="1">&#8206;6</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Join operator   </td>
                              <td colspan="1">Need to be further discussed. Some people requested such operator although it&#8217;s procedural in nature</td>
                              <td colspan="1">5.10.27</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Data model used for examples</td>
                              <td colspan="1">Included for simple illustration purposes.</td>
                              <td colspan="1">Appendix D</td>
                           </tr>
                           <tr>
                              <th colspan="1">From: Mark Shafarman</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Cover page, copyright under review for compliance with HL7 format and requirements</td>
                              <td colspan="1">Copyright has been assigned to HL7.</td>
                              <td colspan="1"></td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; RIM is an information model </td>
                              <td colspan="1">Wording corrected</td>
                              <td colspan="1">3, &#8206;4.1, &#8206;Appendix B</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; GELLO-and-OCL functionality lost/gained </td>
                              <td colspan="1">Described</td>
                              <td colspan="1">5</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Binding GELLO to a vMR. References removed since GELLO can refer to any OO data model</td>
                              <td colspan="1">All  references in document removed</td>
                              <td colspan="1"></td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Navigation through specific paths </td>
                              <td colspan="1">Added</td>
                              <td colspan="1">5.4.3</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Appendix D reference to patient/person </td>
                              <td colspan="1">Included for simple illustration purposes.</td>
                              <td colspan="1">Appendix D</td>
                           </tr>
                           <tr>
                              <th colspan="1">From: Eclipsys Corporation</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Remove comments to Arden Syntax  not supporting OO syntax </td>
                              <td colspan="1">Removed from document</td>
                              <td colspan="1">&#8206;1</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Paragraph stating GELLO is not intended to substitute Arden Syntax but to support HL7 efforts for a standard OCL-based syntax
                                 expression language. 
                              </td>
                              <td colspan="1">Added</td>
                              <td colspan="1"></td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Explanation for GELLO being strongly-typed</td>
                              <td colspan="1">This was included as a request of the CDS TC group as an extra step to ensure consistency /compatibility in data. It is also
                                 consistent with OCL.
                              </td>
                              <td colspan="1">2, &#8206;4</td>
                           </tr>
                           <tr>
                              <td colspan="1">&#8226; Add GELLO and Arden Syntax examples. </td>
                              <td colspan="1">Added</td>
                              <td colspan="1">&#8206;8</td>
                           </tr>
                           <tr>
                              <th colspan="1">From: Eclipsys Co. Requested after reviewing the document sent for revision (July 26, 2004)</th>
                              <th colspan="1">Action</th>
                              <th colspan="1">Section</th>
                           </tr>
                           <tr>
                              <td colspan="1">List requests for changes under "Eclipsys Corporation"</td>
                              <td colspan="1">Done</td>
                              <td colspan="1">1.1, 7, 8</td>
                           </tr>
                           <tr>
                              <td colspan="1">Remove MLM examples. </td>
                              <td colspan="1">Done</td>
                              <td colspan="1">7</td>
                           </tr>
                        </table>
                     </div>
                  </div>
               </div>
            </div>
            <hr title="Separator from body" />
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"><img src="../../support/graphics/NormativeStandard.gif" alt="NormativeStandard1" /></span><span class="number"><a name="CTSIntro"></a>1 </span><span class="title">Introduction</span></div>
               <div class="body">
                  <p><a name="Intro"></a>
                     GELLO is intended to be a standard expression language for decision support. 
                     Its specification has been developed in coordination with the HL7 Clinical Decision Support TC (CDSTC). 
                     The effort, begun in 2001, has been carried out with input from other TCs and SIGs as well, in order to take 
                     account of common needs for constraint specification and query formulation, and the following groups 
                     have been consulted in developing the specification: Control/Query, Modeling and Methodology, and Templates.
                     
                  </p>
                  <p>
                     This document presents the full specification of the GELLO language, and addresses issues discussed at previous HL7 WG 
                     meetings, through the January, 20054, meeting in Atlanta, GA when it was submitted and approved in membership balloting round
                     1. 
                     See prior documents and presentations: [<a href="http://dsg.bwh.harvard.edu/~msordo/GELLO/Arden_GLIF_May_2001_AB.ppt">TC1</a>,  
                     <a href="http://dsg.bwh.harvard.edu/~msordo/GELLO/gello.ppt">TC2</a>, 
                     <a href="http://www.hl7.org/library/committees/dss/minutes/expr-lang-boxwala-10-2001.ppt">TC3</a>, 
                     <a href="  http://www.hl7.org/library/committees/dss/minutes/gelloupdate2-W2002.ppt">TC4</a>, 
                     <a href="http://dsg.bwh.harvard.edu/~msordo/gello/GELLO_may02.ppt">TC5</a>, 
                     <a href="http://cslxinfmtcs.csmc.edu/hl7/arden/HL7GELLOUpdate_1002.ppt">TC6</a>].  An earlier BNF specification 
                     of the language is available at <a href="http://dsg.bwh.harvard.edu/~msordo/gello/GELLClassesBNF.rtf">[DSG02-01] </a>.  
                  </p>
                  <p>
                     The syntax of the GELLO language can be used with any object-oriented data model. In the context of clinical decision support,
                     
                     such an OO data model can be any R-MIM view of the HL7 RIM.  An example -- out of many possible-- of an R-MIM view of the
                     HL7 RIM is 
                     the "virtual medical record" (or vMR), as it is referred to in the CDSTC.  The vMR functions as a limited view of the multiple
                     classes 
                     in the HL7 RIM, showing only those classes relevant to a clinical decision support application. 
                  </p>
                  <p>
                     Based on the premise that GELLO can fully provide expression support for any properly defined view of the HL7 RIM, it has
                     
                     been possible for us to develop GELLO regardless of any particular specification of an OO data model. It is 
                     thus only necessary, when producing a set of decision support applications using GELLO to specify the particular object-oriented
                     model used.
                     
                  </p>
                  <p>
                     As discussed further below, GELLO is based on the Object Constraint Language <a href=" http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf "> (OCL)</a>.  
                     OCL is well-developed as a constraint language and has a number of features that make it desirable for use as an expression
                     language.  
                     GELLO incorporates most of OCL functionality with the exception of some unneeded capabilities which have been removed:  
                     a) pre and post conditions for constraints &#8211; not used in GELLO and b) invariants &#8211; also for constraints. The UML ITS implements
                     
                     the semantics of the HL7 Abstract Data Types in such a way that HL7 data types are mapped into the core UML and OCL 
                     kernel data types where such mappings are appropriate. Hence, GELLO, plus the functionality provided by UML ITS for handling
                     
                     HL7 Abstract Data Types, is intended to provide full expression support inasmuch as it is intended to use only standard features
                     wherever possible.
                     
                  </p>
                  <p>
                     In regard to existing standards for decision support, the evolution of Arden Syntax data references to compatibility with
                     GELLO is already under way. GELLO is not intended to be a substitute for Arden Syntax, although it could be used to write
                     MLMs.  In addition, however, GELLO can be used to support a variety of specifications of expressions in decision support settings
                     other than MLMs.  Further details regarding possible uses of GELLO, and how it can be used in conjunction with various applications,
                     is provided in the companion manuscript, <a href="GELLOWhitePaperV1.2.pdf">GELLO: An Introduction to its Use for Decision Support</a>.
                     
                  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="WhatIsGello"></a>1.1 </span><span class="title">What is GELLO?</span></div>
                     <div class="body">
                        <p>GELLO is a class-based, object-oriented (OO) language that is built on existing standards. GELLO expression language is based
                           on the Object Constraint Language <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">(OCL)</a>, developed by the Object Management Group. Relevant components of OCL have been selected and integrated into the GELLO to
                           provide a suitable framework for manipulation of clinical data for decision support in health care.  
                        </p>
                        <p>The GELLO language can be used to: </p>
                        <ul style="margin-left:20px;">
                           <li>Build up expressions to extract and manipulate data from medical records.</li>
                           <li>Construct decision criteria by building up expressions to reason about particular data features/values. These criteria can
                              be used in decision-support knowledge bases such as those designed to provide alerts and reminders, guidelines, or other decision
                              rules.
                           </li>
                           <li>Create expressions, formulae, etc. for other applications.</li>
                        </ul>
                        <p>GELLO has been designed in the context of a guideline execution model proposed in the HL7 CDSTC <a href="http://www.dmi.columbia.edu/homepages/wandong/homepage20030805_files/GESDOR.htm"> (GeM)</a>. The guideline execution model consists of a series of steps: actions, decisions, patient-state, branches and synchronization.
                           GELLO perfectly fits in this execution model, providing a standard interface to medical record systems and other data or knowledge
                           sources, specifying decision criteria, and abstracting or deriving summary values. The object-oriented approach for the language
                           has the flexibility and extensibility that is needed for implementation in a broad range of applications.  
                        </p>
                        <p>The expression language is strongly typed and object-oriented.  In order to facilitate the process of encoding and evaluation
                           of expressions and more importantly, to maximize the ability to share such expressions, GELLO includes basic built-in data
                           types (§&#8206;5.1), while providing the necessary syntactic mechanisms to manipulate an OO  data model compatible with the HL7
                           RIM, and access all the data model associated classes and methods.  This is especially important in enabling decision rules
                           and guidelines to successfully support different data models, inasmuch as classes and relationships specified could vary from
                           one data model to another. 
                        </p>
                        <p>This document contains the full software specification for GELLO expression language. It is organized as follows:</p>
                        <p>Section &#8206;2 describes the requirements for an expression language for clinical use. Section &#8206;3 describes the main goals and
                           properties of GELLO to meet such requirements. Section &#8206;4 briefly describes the Object Constraint Language (OCL) features.
                           
                        </p>
                        <p>Section &#8206;5 describes OCL features included in GELLO expression language, including basic data types in §&#8206;5.1.1, model types
                           in §&#8206;5.1.2 (classes in the data model), collection types in §&#8206;5.1.3, properties of model types (attributes and methods) in
                           §&#8206;5.3, and variables in §&#8206;5.4. Variables are named GELLO expressions with a predefined, limited scope that can be used anywhere
                           a GELLO expression can be used (see §&#8206;5.5.2).  In order to preserve GELLO as a side-effect-free language, the mechanisms for
                           creating variables as instances of classes is delegated to the underlying data model. This section also describes GELLO built-in
                           operators (see §&#8206;5.9), and their syntax and semantics, and discusses the tuple type as an aggregation type (see §&#8206;5.1.4) and
                           tuple operators (see §&#8206;5.11) supported by GELLO. 
                        </p>
                        <p>Section &#8206;6 describes the syntax of the GELLO grammar. Section &#8206;7 gives examples of GELLO expressions for retrieving information.
                           It also describes GELLO expressions used to build decision criteria, perform abstraction or derive summary values. Finally,
                           appendices A, B and C contain reference diagrams of the HL7 v3 Data Types, HL7 RIM, UML OCL core kernel declarations. Appendix
                           D depicts a simple data model used to illustrate examples along the document.
                        </p>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="ReqsForExpLang"></a>2 </span><span class="title">Requirements for an Expression Language in the Clinical Context</span></div>
               <div class="body">
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="NonFuncReq"></a>2.1 </span><span class="title">Non-Functional Requirements</span></div>
                     <div class="body">
                        <p></p>
                        <p>This section summarizes the non-functional requirements which the GELLO expression language meet.</p>
                        <ol>
                           <li>The syntax of the expression language is object-oriented (OO). </li>
                           <li>The expression language is the means for accessing and manipulating data retrieved from an object-oriented data model. In
                              the clinical context, such data model may be a RMIM &#8211; a refined view of the HL7 RIM. 
                           </li>
                           <li>Expressions can be used to retrieve information from data sources, build decision criteria, and reason about specific data/values.
                              Expressions are text strings that must conform to the definition of an expression in the GELLO language specification (section
                              &#8206;6).
                           </li>
                           <li>Temporal data can be handled by expressions containing time-related relationships. Temporal operators are part of the HL7
                              RIM and can be referred to using the specified notation as described in section &#8206;5.12 of this document. 
                           </li>
                           <li>The object-oriented approach allows modularity, encapsulation and extensibility. Thus use of GELLO:
                              						
                              <ol>
                                 <li>Provides platform-independent support for mapping to any standard OO data model used. Therefore eliminating the need for implementation-specific
                                    encoding methods for information retrieval as part of knowledge content (guidelines, alerts, etc.).
                                 </li>
                                 <li>Simplifies the evaluation of clinical data objects.</li>
                                 <li>Facilitates sharing of decision logic and other computer expressions. </li>
                              </ol>
                           </li>
                        </ol>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="UseCases"></a>2.2 </span><span class="title">Use Cases</span></div>
                     <div class="body">
                        <p>The following use cases define a goal-oriented set of interactions between GELLO and external actors. Actors are users and/or
                           other systems that interact with GELLO. A use case is initiated by a user with a particular goal in mind, and complete successfully
                           when such goal is satisfied. Use cases are defined in terms of actors (who) interacting with the system (what) for a particular
                           purpose (goal) without dealing with system internals.
                        </p>
                        <p>User profiles: </p>
                        <ul style="margin-left:20px;">
                           <li><strong>Medical experts</strong> not familiar with computer languages, with some basic experience with computers (e.g. word-processing, software packages)
                           </li>
                           <li><strong>Researchers</strong> not familiar with computer languages, with string scientific knowledge and some basic experience with computers (e.g. word-processing,
                              software packages)
                           </li>
                           <li><strong>Health Economists</strong> with expertise in health economics and communication with health care providers, though not familiar with computer languages,
                              with some basic experience with computers (e.g. word-processing, software packages)
                           </li>
                           <li><strong>Epidemiologist</strong> with expertise in public health issues. S/he may not familiar with computer languages, with some basic experience with computers
                              (e.g. word-processing, software packages)
                           </li>
                           <li><strong>Knowledge engineers</strong> with programming experience and some basic medical knowledge.
                           </li>
                           <li><strong>Programmers</strong> with ample programming experience and no medical expertise.
                           </li>
                        </ul>
                        <p>Scenarios:</p>
                        <ul style="margin-left:20px;">
                           <li>i. To write implementation-independent expressions that can be embedded in multiple clinical applications (guidelines, RIM
                              derivation expression, template constraints, etc.) to retrieve patient information from an OO data model.
                           </li>
                           <li>ii. To write implementation-independent expressions that can be embedded in multiple clinical applications (guidelines, RIM
                              derivation expression, template constraints, etc.) for representing knowledge and decision logic in a medical context.
                           </li>
                           <li>iii. To enable existing clinical applications ( guidelines, RIM derivation expression, template constraints, etc.)  to be
                              made executable and populate them with data from electronic patient records (derives from (i) and (ii))
                           </li>
                           <li>iv. To allow researchers, health economists, epidemiologists and clinical and health care providers  to implement expressions
                              that can be embedded in research, clinical, public health protocols, templates, or any application that requires expressions
                              that requires retrieval and evaluation of data from an OO data model
                           </li>
                           <li>v. To ease the evaluation of clinical data objects (derives from (i) and (ii)).</li>
                           <li>vi. To facilitate sharing of decision logic and other computer-based expressions.</li>
                        </ul>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <caption><a name="usecase1"> </a>
                              			Table
                              			1: Use Case 1
                           </caption>
                           <tbody>
                              <tr>
                                 <th colspan="1"><strong>Use Case 1 </strong></th>
                                 <th colspan="1"><strong>Expressions  into clinical applications to retrieve patient-related data </strong></th>
                              </tr>
                              <tr>
                                 <td colspan="1">Description</td>
                                 <td colspan="1">Map clinical knowledge into multiple clinical applications by embedding implementation-independent GELLO expressions to retrieve
                                    patient information from an OO data model
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Actors</td>
                                 <td colspan="1">Clinicians, researchers, epidemiologists, knowledge engineers, programmers</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Assumptions</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Expressions are strings that comply with the GELLO specification for expressions</li>
                                       <li>The general structure of the clinical application is correct, or there is a mechanism that validates it</li>
                                       <li>Patient and other clinical data sources are available and in an OO format compatible with the HL7 RIM</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Steps</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>GELLO expressions are embedded in the appropriate locations in the clinical application</li>
                                       <li>GELLO expressions satisfy the GELLO  syntax</li>
                                       <li>GELLO expressions are validated by a parser</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Variations</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Parser detects errors and highlights them</li>
                                       <li>User corrects errors</li>
                                    </ul>
                                 </td>
                              </tr>
                           </tbody>
                        </table>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <caption><a name="usecase2"> </a>
                              			Table
                              			2: Use Case 2
                           </caption>
                           <tbody>
                              <tr>
                                 <th colspan="1"><strong>Use Case 2 </strong></th>
                                 <th colspan="1"><strong>Expressions in clinical applications for decision logic </strong></th>
                              </tr>
                              <tr>
                                 <td colspan="1">Description</td>
                                 <td colspan="1">Represent knowledge and decision logic in multiple clinical applications by embedding implementation-independent GELLO expressions
                                    that can be evaluated.
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Actors</td>
                                 <td colspan="1">Clinicians, researchers, epidemiologists, knowledge engineers, programmers</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Assumptions</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Expressions are strings that comply with the GELLO specification for expressions</li>
                                       <li>The general structure of the clinical application is correct, or there is a mechanism that validates it</li>
                                       <li>Patient data sources are available and in an OO format compatible with the HL7 RIM</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Steps</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>GELLO expressions are embedded in the appropriate locations in the clinical application</li>
                                       <li>GELLO expressions satisfy the GELLO  syntax</li>
                                       <li>GELLO expressions are validated by a parser</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Variations</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Parser detects errors and highlights them</li>
                                       <li>User corrects errors</li>
                                    </ul>
                                 </td>
                              </tr>
                           </tbody>
                        </table>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <caption><a name="usecase3"> </a>
                              			Table
                              			3: Use Case 3
                           </caption>
                           <tbody>
                              <tr>
                                 <th colspan="1"><strong>Use Case 3 </strong></th>
                                 <th colspan="1"><strong>Automatic population and execution of applications </strong></th>
                              </tr>
                              <tr>
                                 <td colspan="1">Description</td>
                                 <td colspan="1">Derived from Use cases 1 and 2, clinical applications that contain GELLO expressions can be populated and executed independently
                                    of the environment.
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Actors</td>
                                 <td colspan="1">Clinicians, researchers, epidemiologists, health economists</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Assumptions</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Expressions have been previously validated and they conform to the GELLO syntax</li>
                                       <li>The general structure of the  application is correct, or there is a mechanism that validates it</li>
                                       <li>Data sources are available and in an OO format compatible with the HL7 RIM</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Steps</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Execution engine enacts clinical application</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Variations</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Validation to detect mismatched data types, classes</li>
                                    </ul>
                                 </td>
                              </tr>
                           </tbody>
                        </table>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <caption><a name="usecase4"> </a>
                              			Table
                              			4: Use Case 4
                           </caption>
                           <tbody>
                              <tr>
                                 <th colspan="1"><strong>Use Case 4 </strong></th>
                                 <th colspan="1"><strong>Evaluation of clinical objects </strong></th>
                              </tr>
                              <tr>
                                 <td colspan="1">Description</td>
                                 <td colspan="1">Derived from Use cases 1 and 2, clinical data objects can be easily evaluated independently of the environment using GELLO
                                    expressions.
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Actors</td>
                                 <td colspan="1">Clinicians, researchers, epidemiologists, knowledge engineers, programmers</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Assumptions</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Expressions have been previously validated and they conform to the GELLO syntax</li>
                                       <li>The general structure of the clinical application is correct, or there is a mechanism that validates it</li>
                                       <li>Patient data sources are available and in an OO format compatible with the HL7 RIM</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Steps</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Evaluate previously populated clinical data objects</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Variations</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Validation to detect mismatched data types, classes</li>
                                    </ul>
                                 </td>
                              </tr>
                           </tbody>
                        </table>
                        <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                           <caption><a name="usecase5"> </a>
                              			Table
                              			5: Use Case 5
                           </caption>
                           <tbody>
                              <tr>
                                 <th colspan="1"><strong>Use Case 5</strong></th>
                                 <th colspan="1"><strong>Sharing decision logic and computer-based expressions</strong></th>
                              </tr>
                              <tr>
                                 <td colspan="1">Description</td>
                                 <td colspan="1">To facilitate sharing of decision logic and other computer-based expressions independently of the  application.</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Actors</td>
                                 <td colspan="1">Clinicians, researchers, epidemiologists, helath economists, knowledge engineers, programmers</td>
                              </tr>
                              <tr>
                                 <td colspan="1">Assumptions</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Expressions have been previously validated and they conform to the GELLO syntax</li>
                                       <li>Patient/medical data sources are available and in an OO format compatible with the HL7 RIM</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Steps</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Reuse decision logic among applications</li>
                                    </ul>
                                 </td>
                              </tr>
                              <tr>
                                 <td colspan="1">Variations</td>
                                 <td colspan="1">
                                    <ul>
                                       <li>Validation to detect mismatched data types, classes</li>
                                    </ul>
                                 </td>
                              </tr>
                           </tbody>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ClinicalDataModel"></a>2.3 </span><span class="title">A Clinical Decision Support Data Model</span></div>
                     <div class="body">
                        <p>GELLO can provide full expression support for any properly defined object-oriented data model in general. In a clinical context,
                           GELLO can interact with any HL7 RIM-based OO data model serving as intermediary to heterogeneous medical record systems. 
                           
                        </p>
                        <p>Although this approach represents a paradigm shift in data representation, moving from time-stamped atomic data types to an
                           object-oriented data model, it is an ongoing effort towards a standard for exchange, management and integration of clinical
                           data much needed by the community.  
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ExpressionsAndGuidelines"></a>2.4 </span><span class="title">Expressions and Clinical Guidelines</span></div>
                     <div class="body">
                        <p>The need for a language to formulate expressions to extract and manipulate clinical data is clear.  Ideally such a language
                           should be (Click <a href="http://smi-web.stanford.edu/people/tu/HL7/HL7SanDiegoJan2002.txt"> here</a>to go to appropriate reference):
                        </p>
                        <ul style="margin-left:20px;">
                           <li>vendor-independent</li>
                           <li>platform-independent</li>
                           <li>object-oriented and compatible with the HL7 RIM</li>
                           <li>easy to read/write</li>
                           <li>side-effect free. The result of an operation leaves the state of the system unchanged. The UML attribute isQuery will always
                              return true for any GELLO expression.
                           </li>
                           <li>flexible</li>
                           <li>extensible</li>
                        </ul>
                        <p>The following section describes how GELLO complies with the above requirements and provides the mechanisms for handling clinical
                           data stored in any OO compatible data model. 
                        </p>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="GELLOgoalsProp"></a>3 </span><span class="title">GELLO: Goals and Properties</span></div>
               <div class="body">
                  <p>We propose GELLO as a platform-independent standard expression language for sharing and manipulating knowledge in a medical
                     context. Specifically:
                  </p>
                  <ul style="margin-left:20px;">
                     <li>GELLO is targeted to clinical applications that need an expression language for decision support. </li>
                     <li>GELLO is vendor-independent by relying on a language specification that is not vendor-specific.</li>
                     <li>GELLO is platform-independent.</li>
                     <li>GELLO provides the mechanisms to access data through an OO data model, with strongly-typed expressions, via general purpose
                        expression language.
                     </li>
                     <li>GELLO is a declarative language; expressions have no side effects.</li>
                     <li>GELLO is extensible by adding new user-defined classes to the underlying OO data model.</li>
                     <li>GELLO can refer to any data manipulation methods explicitly defined in the OO data model. The purpose of GELLO is to provide
                        a robust syntax for expressions so data can be easily handled.
                     </li>
                     <li>GELLO expression evaluation is compatible with the v.3 RIM; hence each decision rule or guideline need not provide a separate
                        mechanism for translation of data elements to/from host environments. 
                     </li>
                     <li>The object-oriented approach allows modularity, encapsulation and extensibility. </li>
                  </ul>
                  <p>Thus use of GELLO: </p>
                  <ol>
                     <li>provides platform-independent support for mapping to an OO data model, compatible with the v.3 HL7 RIM therefore eliminating
                        the need for implementation-specific encoding methods for information retrieval as part of knowledge content (guidelines,
                        alerts, etc.).
                     </li>
                     <li>simplifies the creation and updating of clinical data objects, and their evaluation.</li>
                     <li>facilitates sharing of decision logic and other computer expressions. </li>
                  </ol>
                  <p>
                     <table width="90%">
                        <tr>
                           <td class="figure"><pre><br /><img class="graphic" src="graphics/gELLOandAppsWithoutMLM.gif" alt="GELLOandAppsWithoutMLM.gif" /><br /><br /></pre></td>
                        </tr>
                     </table>
                  </p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="OCL"></a>4 </span><span class="title">OCL</span></div>
               <div class="body">
                  <p>OCL is the expression language used for specifying invariant constraints and pre- and &#8211;post-conditions in object models in
                     the Unified Modeling Language (UML).  OCL is a strongly-typed pure expression language without any side effects. Although
                     the evaluation of an OCL expression returns a value, the state of the underlying data model cannot change because of the evaluation
                     of such an expression.  OCL is the result of a consensus effort towards a standard in object-oriented modeling and design.
                     Since OCL is not a programming language, it does not rely on a specific platform.  All implementation issues are out of the
                     scope of the language.  The OCL expression language satisfies the requirements we have outlined above for GELLO, namely:
                  </p>
                  <ul style="margin-left:20px;">
                     <li>vendor-independent</li>
                     <li>platform-independent</li>
                     <li>object-oriented </li>
                     <li>easy to read/write</li>
                     <li>side-effect free</li>
                     <li>flexible</li>
                     <li>extensible.</li>
                  </ul>
                  <p>In addition, OCL is:</p>
                  <ul style="margin-left:20px;">
                     <li>concise </li>
                     <li>declarative.</li>
                  </ul>
                  <p>The latest version of OCL documentation can be found at the <a href=" http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf "> Object Management Group website. </a></p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="WhyOCL"></a>4.1 </span><span class="title">Why OCL?</span></div>
                     <div class="body">
                        <p>Besides OCL, we considered XQL, OWL and Java as options for defining a query and expression language. XQL is a query language
                           designed specifically for XML documents. XML documents are unordered, labeled trees, with nodes representing the document
                           entity, elements, attributes, processing instructions and comments. The implied data model behind XML neither matches that
                           of a relational data model nor that of an object-oriented data model. XQL is a query language for XML in the same sense as
                           SQL is a query language for relational tables. Since the HL7 RIM information model and the vMR data model are both object-oriented,
                           it is clear that XQL is not an appropriate approach for an object-oriented query and expression language.
                        </p>
                        <p>The Web Ontology Language <a href="http://www.w3.org/TR/2003/WD-owl-ref-20030221/">(OWL)</a> is an ongoing effort by W3C to specify a language for publishing and sharing ontologies on the Web. OWL is intended to provide
                           a language that can be used to describe entities and inherent relations between them in Web documents and applications. OWL
                           can be used in applications that need to understand the content. In other words, OWL is more focused on machine interpretable
                           definitions of concepts, rather than on the evaluation of expressions that include arithmetic and user-defined operators.
                           Given that OWL has focused on Web applications and the semantics of Web documents, we did not consider OWL a suitable approach
                           for a language focused on query and computation of complex  clinical information.  (A list of current W3C recommendations
                           and techincal documents can be found at the <a href="http://www.w3.org/TR/">W3C website).        </a></p>
                        <p>We also considered Java as an option for an expression language. Java meets most of the requirements in §&#8206;2. Java is platform-independent,
                           and object-oriented; it is relatively easy to read and write, and is flexible and extensible. However, Java is a full-fledged
                           programming language with side-effects, and it is controlled by a single vendor. 
                        </p>
                        <p>As noted above, OCL has arisen as a consensus effort at creating a standard approach to object-oriented modeling and design.
                           OCL meets all our requirements and, importantly, OCL is already been used by various TCs and SIGs within HL7. 
                        </p>
                        <p>A complete description of the OCL language can be found at the <a href=" http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf "> OMG website.</a></p>
                        <p>In summary, GELLO removes some OCL unneeded capabilities as a language to be used as an expression language, plus the inclusion
                           of particular UML data types and the HL7 types to enable it to reference instances of patient-specific data rather than just
                           model types.
                        </p>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="GELLO"></a>5 </span><span class="title">GELLO</span></div>
               <div class="body">
                  <p>GELLO was conceived as a pure, declarative, strongly-typed expression language.  GELLO is free of side effects; it provides
                     the mechanisms to access medical data through an OO data model compatible with the v.3 RIM. Several features of OCL have been
                     incorporated into GELLO to make it a robust and flexible platform-independent language. 
                  </p>
                  <p>GELLO follows the same conventions as OCL in relationship with the UML metamodel. In other words, every GELLO expression is
                     written in the context of a specific type. Although GELLO is a subset of OCL, not all GELLO features are OCL features. We
                     have preserved consistency as much as possible. The majority of GELLO operators are part of OCL, with the exception of some
                     collection operators (firstN §&#8206;5.10.18, lastN §&#8206;5.10.19, and join §&#8206;5.10.27) which have been added to support the requested
                     functionality. As for data types, all GELLO built-in data types are part of OCL including the Tuple data type §&#8206;5.1.4 (the
                     abstract specification for OCL data types can be found at the <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">OMG website</a>). In this section, the use of HL7 classes as a data model is introduced. All basic data types are provided by GELLO (§&#8206;5.1),
                     while model types &#8211;or classes- are defined in the underlying HL7 data model (§&#8206;5.1.2). Variables (§&#8206;5.4) are strongly typed
                     named GELLO expressions that can be used at any place a GELLO expression ca be used (§&#8206;5.5.2).  In order to preserve GELLO
                     as a side-effect free language, the creation of objects as instances of HL7 classes is delegated to the HL7 RIM.  This will
                     allow any UML based framework with a full reference implementation of RIM and data types to perform these functions as required
                     
                  </p>
                  <p>In summary, </p>
                  <p>GELLO incorporates most of OCL functionality with the exception of some unneeded capabilities have been removed a)pre and
                     post conditions for constraints -not used in GELLO and b) invariants -also for constraints. The UML ITS implements the semantics
                     of the HL7 Abstract Data Types in such a way that HL7 data types are mapped into the core UML and OCL kernel data types where
                     such mappings are appropriate. Such functionality compatible with the HL7 RIM is used by GELLO, hence enabling it to reference
                     instances of patient-specific data independent of platform, vendor, and data model.
                  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="GELLOtypes"></a>5.1 </span><span class="title">GELLO Types</span></div>
                     <div class="body">
                        <p>GELLO is a strongly-typed language. This means that every expression must have a known type. There are two type categories:
                           predefined types and model (user-defined) types.
                        </p>
                        <p>Predefined types include basic types, collection types and tuple type.</p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="BasicTypes"></a>5.1.1 </span><span class="title">Basic Types</span></div>
                           <div class="body">
                              <p>A primitive data type is named by its reserved word. They are: Boolean, integer, real, string.</p>
                              <p></p>
                              <p>Having basic data types allows us to create literals of the form:</p>
                              <ul style="margin-left:20px;">
                                 <li>let aNum : integer = 5</li>
                                 <li>let xNum: real = 5.6</li>
                                 <li>let aString: string = &#8216;abc&#8217;         (note single quotes)</li>
                                 <li>let aBoolean: Boolean = true</li>
                              </ul>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="Boolean"></a>5.1.1.1 </span><span class="title">Boolean</span></div>
                                 <div class="body">
                                    <p>The Boolean type in GELLO is a three-valued type. A GELLO Boolean type can have one of three possible values: true, false,
                                       and unknown.  GELLO Boolean operators are described in §&#8206;5.9.6.  
                                    </p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="Integer"></a>5.1.1.2 </span><span class="title">Integer</span></div>
                                 <div class="body">
                                    <p>Integer represents the mathematical natural numbers. Integer is a subtype of real. Arithmetic operators are described in §&#8206;5.9.</p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="Real"></a>5.1.1.3 </span><span class="title">Real</span></div>
                                 <div class="body">
                                    <p>Real represents the mathematical concept of real values. Arithmetic operators are described in §&#8206;5.9.</p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="String"></a>5.1.1.4 </span><span class="title">String</span></div>
                                 <div class="body">
                                    <p>Strings are sequences of characters. Literal strings are enclosed with single quotes. The available operations for strings
                                       are described in §&#8206;5.9.7.
                                    </p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="UnknownBoolean"></a>5.1.1.5 </span><span class="title">Unknown and Null as third Boolean value</span></div>
                                 <div class="body">
                                    <p>In the previous versions of this specification there was a discrepancy between GELLO unknown and HL7 RIM Null as third Boolean
                                       value. This discrepancy has been resolved by the <a href="../../infrastructure/itsuml/datatypes-its-uml.htm#">UML ITS data types</a>, which map unknown into Null and vice versa.
                                    </p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="TypeHierarchy"></a>5.1.1.6 </span><span class="title">Basic Type Hierarchy and Type Conformance Rules </span></div>
                                 <div class="body">
                                    <p>Integer is a subtype of real. Hence, integer conforms to real. </p>
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ModelTypes"></a>5.1.2 </span><span class="title">Model Types</span></div>
                           <div class="body">
                              <p>Model types refer to user-defined classes in the underlying data model. References to such types include either a full description
                                 name, e.g. PhysicalQuantity or its alias, e.g. PQ. Both examples refer to the model type PhysicalQuantity as defined in the
                                 HL7 RIM. 
                              </p>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="ModelTypeHierarchy"></a>5.1.2.1 </span><span class="title">Model Type Hierarchy</span></div>
                                 <div class="body">
                                    <p>For any given class in the data model, if class B is a subtype of class A, then class B conforms to class A. </p>
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="CollectionTypes"></a>5.1.3 </span><span class="title">Collection Types</span></div>
                           <div class="body">
                              <p>A GELLO collection is an abstract type with concrete collection types as subtypes. As in OCL, a GELLO collection has three
                                 types: Set, Bag and Sequence.
                              </p>
                              <ul style="margin-left:20px;">
                                 <li>A <strong>Set</strong>is the mathematical set. It does not contain any duplicate elements. All elements have the same type.
                                 </li>
                                 <li>A <strong>Bag </strong> is a collection of elements. Duplicates are allowed. All elements in a Bag have the same type.
                                 </li>
                                 <li>A <strong>Sequence </strong> is a collection with ordered elements. Duplicates are allowed. All elements in a Sequence must have the same type.
                                 </li>
                              </ul>
                              <p>Notation for collections is as follows:</p>
                              <ul style="margin-left:20px;">
                                 <li>typeOfCollection {element1, &#8230;, elementn}, </li>
                              </ul>
                              <p>Where </p>
                              <ul style="margin-left:20px;">
                                 <li>typeOfCollection is one of Set, Bag, Sequence; and {element1, &#8230;, elementn} is a list of the elements &#8211;all with the same type-
                                    separated by commas. 
                                 </li>
                              </ul>
                              <p>When creating a sequence of integers, the list of elements can be replaced by an interval specification consisting of two
                                 literals of type integer intLiteral1 and intLiteral2 separated by &#8216;..&#8217;: Sequence{1..5} is equivalent to Sequence{1,2,3,4,5}.
                              </p>
                              <p>Collections can be specified by a literal &#8211;as defined above- or as a result of an operation over a collection. See §&#8206;5.10
                                 for collection operators.
                              </p>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="CollColl"></a>5.1.3.1 </span><span class="title">Collections of Collections</span></div>
                                 <div class="body">
                                    <p>Collections of collections are not flattened automatically. Flattening is carried out by means of an explicit function making
                                       the effect of the flattening process clear. Flattening in OCL applies to all collection types. The indicated rules for flattening
                                       can be applied recursively until the element type of the result is a non-collection type.
                                    </p>
                                 </div>
                              </div>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="CollHierarchy"></a>5.1.3.2 </span><span class="title">Collection Type Hierarchy and Type Conformance Rules</span></div>
                                 <div class="body">
                                    <p>Set, Bag and Sequence are all subtypes of Collection. </p>
                                 </div>
                              </div>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TupleType"></a>5.1.4 </span><span class="title">Tuple Type</span></div>
                           <div class="body">
                              <p>The tuple type is part of OCL and hence of the GELLO grammar. A tuple combines elements with different types into an aggregate
                                 type. Each tuple part has a name, a type and a value. A tuple part can be a single element or a collection. The type of a
                                 tuple part can be of a basic or a model type. 
                              </p>
                              <p>The syntax of a tuple is as follows:  Tuple{ label1: type1= value1, &#8230;, labeln: typen = valuen}, Where labeli is the label
                                 of the element <em>ith</em>, typei and valuei  are the valid type and value respectively. 
                              </p>
                              <p>Tuples can be used as a return type from expressions that retrieve information from more than one source such as joins (§&#8206;5.10.27).
                                 GELLO provides some tuple operators to access the information returned by an expression. These operators are described in
                                 §&#8206;5.11.
                              </p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="EnumTypes"></a>5.1.5 </span><span class="title">Enumeration Types</span></div>
                           <div class="body">
                              <p>Enumeration are datatypes in UML. They define a number of literals as possible values of the enumeration.</p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Names"></a>5.2 </span><span class="title">Names</span></div>
                     <div class="body">
                        <p>Names may be used in expressions to bind domain elements to values. If the name of an attribute or an operation appears in
                           an expression, the class it belongs to must be explicitly referred to.
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Properties"></a>5.3 </span><span class="title">Properties</span></div>
                     <div class="body">
                        <p>A property of a class can be an attribute (§&#8206;5.3.1) or an operation (§&#8206;5.3.2). The syntax for referring to a property of an
                           instance of class is: InstanceOfClass.property, which is consistent with the &#8216;dot&#8217; notation of an OO data model.
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Attributes"></a>5.3.1 </span><span class="title">Attributes</span></div>
                           <div class="body">
                              <p>Attributes are named properties of class that describe the characteristics that instances of such class can have.  For example,
                                 aPerson is an instace of the class Person with an attribute FirstName, we refer to a person&#8217;s name by writing aPerson.FirstName,
                                 where aPerson is an instace of the Person class and FirstName is an attribute of that class.
                              </p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Operations"></a>5.3.2 </span><span class="title">Operations</span></div>
                           <div class="body">
                              <p>An operation is the specification of a service that can be requested from an object of the class. The name of an operation
                                 may appear in a GELLO expression only as a part of a full method invocation expression. That is, along with the name of the
                                 operation and its arguments, the class or object it belongs to must be explicitly referred to. Operations are side effect-free,
                                 they do not change the state of any object.
                              </p>
                              <p></p>
                              <p>The HL7 data model provides classes and associated operations. These operations provide the functionality for handling the
                                 clinical data stored in the data model.
                              </p>
                              <div class="subSubSubSection">
                                 <div class="header"><span class="icon"> </span><span class="number"><a name="OperationParam"></a>5.3.2.1 </span><span class="title">Operation Parameters</span></div>
                                 <div class="body">
                                    <p>Parameters are name argument values passed to an operation or method in a method call. If required, arguments must be included
                                       in the invocation separated by commas. The type of each value must match the type of the expected argument in each position
                                       in the argument list. 
                                    </p>
                                 </div>
                              </div>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ContextRefs"></a>5.4 </span><span class="title">Context and References to Contextual Instances</span></div>
                     <div class="body">
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ContextSelf"></a>5.4.1 </span><span class="title">Context, Self and Implicit References to Contextual Instances</span></div>
                           <div class="body">
                              <p>Evaluation of expressions requires a contextual instance of a specific type. The context of an expression is explicitly defined
                                 using the context expression. 
                                 					The syntax is as follows: context [alias:] Class.  Where class indicates the &#8216;primary&#8217; class in the data model from which
                                 the following expression 
                                 					will be evaluated. Context Statements cannot be nested. The notation is as follows:
                              </p>
                              <p></p>
                              <table width="90%">
                                 <caption>Example 1. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Context [alias: ]Class 
GELLO expressions with a reference to either alias or class name
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The &#8216;primary&#8217; class is the class that defines the context where the given expressions are to be evaluated. 
                                 					For example (using the data model depicted in Figure 6):
                              </p>
                              <table width="90%">
                                 <caption>Example 2. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Context Patient
&#8230;  GELLO expressions with Patient
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>Sets up the context as all the instances of the &#8216;primary&#8217; class Patient in the data model.:</p>
                              <p></p>
                              <p>The following context definition:</p>
                              <table width="90%">
                                 <caption>Example 3. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Context p: Patient
p.age&gt; 50
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>sets the context over which later expressions will be evaluated against as all patients older than 50 years of age.</p>
                              <table width="90%">
                                 <caption>Example 4. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Context Patient
Self. ID = "123abc"
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>sets the context of a single patient with a patient ID = "123abc"over which later expressions will be evaluated against.</p>
                              <p></p>
                              <p>Note the use of self as an implicit reference to Patient.   </p>
                              <p>Thus, for example, an expression such as:</p>
                              <table width="90%">
                                 <caption>Example 5. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>ProblemList &#8594; exists(Code.equals(Factory.CodedValue("Asthma")))
within the previously defined patient context, this expression is equivalent to:
					
ProblemList &#8594; exists(Code.equals(Factory.CodedValue("Asthma")) and PatientID="123abc")
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="PackContext"></a>5.4.2 </span><span class="title">Package Context and Pathname</span></div>
                           <div class="body">
                              <p>Package context can be used to group classes, while Pathnames can be used to refer to the classes contained in them. The notation
                                 is ad follows:
                              </p>
                              <p></p>
                              <table width="90%">
                                 <caption>Example 6. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Package packageName ::
   Context contextName :
      GELLOexpressions
EndPackage</pre></pre></td>
                                 </tr>
                              </table>
                              <p></p>
                              <p>For PathName:</p>
                              <table width="90%">
                                 <caption>Example 7. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>packageName :: [packageNamei ::]* TypeName
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="NavAssoc"></a>5.4.3 </span><span class="title">Navigation through Associations</span></div>
                           <div class="body">
                              <p>Access to objects and their properties  can be performed by navigating through associations of objects. The notation is as
                                 follows:
                              </p>
                              <table width="90%">
                                 <caption>Example 8. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>context Object :
   self.associatedObject
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>For example:</p>
                              <table width="90%">
                                 <caption>Example 9. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>context Patient:
   self.Medications
					   </pre></pre></td>
                                 </tr>
                              </table>
                              <p>returns all the medications a patient is taking, while:</p>
                              <table width="90%">
                                 <caption>Example 10. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>context Patient:
   self.Medications["aspirin"]
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>returns all the instances of medication = aspirin for a given patient.</p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="VarDec"></a>5.5 </span><span class="title">Variable Declaration</span></div>
                     <div class="body">
                        <p>A variable declaration declares a variable name and binds it to a type. A variable can only hold a value of the same type.
                           A declaration defines the name for a variable inside a program. Each variable declaration must have a scope (§&#8206;5.5.2). 
                        </p>
                        <p></p>
                        <p>Variables  are declared using the let OCL expression. The type of the variable can be either one of the basic built-in GELLO
                           data types §&#8206;5.1.1, 
                           				GELLO collection types §&#8206;5.1.3, GELLO tuple type §&#8206;5.1.4, or a class from the underlying data model §&#8206;5.1.2.. The type
                           of the return value of an 
                           				expression must match the type of the variable to which such a value is to be assigned. Once an expression is bound to
                           a variable, it cannot be 
                           				changed. The syntax for let expressions is as follows:
                        </p>
                        <table width="90%">
                           <caption>Example 11. </caption>
                           <tr>
                              <td class="example"><pre><pre>let varName: type = Expression.
					</pre></pre></td>
                           </tr>
                        </table>
                        <p>Where varName is a string that is the name of the variable with type type, and Expression is a valid GELLO expression. </p>
                        <p>An example of a variable of basic type:</p>
                        <table width="90%">
                           <caption>Example 12. </caption>
                           <tr>
                              <td class="example"><pre><pre>let threshold_for_osteodystrophy : integer = 70 			         &#8230;(1)
					</pre></pre></td>
                           </tr>
                        </table>
                        <p>If a variable references an instance of a model type, the Expression must include the Factory static method as in: 
                           				Factory.class("argument list"),where class is a class in model class. Factory takes only one string literal as argument
                           list. 
                           				As a result, it binds a name varName to an object of type class. The full notation:
                        </p>
                        <table width="90%">
                           <caption>Example 13. </caption>
                           <tr>
                              <td class="example"><pre><pre>let  variableName: type = Factory.class("argument list")
An example:
   let potassium: PhysicalQuantity = Factory.PhysicalQuantity("76 kg")   	&#8230;(2)
				   </pre></pre></td>
                           </tr>
                        </table>
                        <p>An example when a variable references a collection type:</p>
                        <table width="90%">
                           <caption>Example 14. </caption>
                           <tr>
                              <td class="example"><pre><pre>let Myobservations: set = observation(select(coded_concept= &#8216;abc&#8217;)		&#8230;(3)
					</pre></pre></td>
                           </tr>
                        </table>
                        <p>An example when the variable is a tuple:</p>
                        <table width="90%">
                           <caption>Example 15. </caption>
                           <tr>
                              <td class="example"><pre><pre>let variousPatientData : tuple = patient(join(paramList1; paramList2; CondExp; ParamList3) 	&#8230;(4)
					</pre></pre></td>
                           </tr>
                        </table>
                        <p>In (1) threshold_for_osteodystrophy is a GELLO built-in basic type and hence we create the variable and assign the value of
                           70 in the same operation. 
                        </p>
                        <p>In (2), potassium has a type PhysicalQuantity which is a class in the data model, and we need to create a reference to an
                           instance of that class before assigning it to the variable.
                        </p>
                        <p>In (3) Myobservations is a set, which is a GELLO collection type. Observations contains all the instances of the class observation
                           with a coded concept = &#8216;abc&#8217;.
                        </p>
                        <p>In (4) variousPatientData is a tuple containing information related to the current patient. Such information is from different
                           sources and has different types, hence it is grouped into an aggregated type tuple. See §&#8206;5.10.27 for the full notation of
                           the join operator.
                        </p>
                        <p></p>
                        <p>In summary, to create a variable with a basic data type, the syntax is:</p>
                        <table width="90%">
                           <caption>Example 16. </caption>
                           <tr>
                              <td class="example"><pre><pre>let variable : type = expression
					</pre></pre></td>
                           </tr>
                        </table>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="RefsClass"></a>5.5.1 </span><span class="title">Declaring References to Instances of Classes</span></div>
                           <div class="body">
                              <p>Declaring a new reference to class is an operation implemented from an external factory. Although the functionality of this
                                 
                                 					approach is beyond the scope of this document, below we describe the syntax of the operation. This approach 
                                 					satisfies both the HL7 RIM abstract specification and the UML ITS specification, and is similar to that approved by the
                                 Java-SIG.
                              </p>
                              <p>A static factory method "Factory" takes only one string literal as argument list. As a result it binds a name (variableName)
                                 to an 
                                 					object of type class, where class is a model class. The notation is as follows:
                              </p>
                              <table width="90%">
                                 <caption>Example 17. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>let  variableName: type = Factory.class("argument list")
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>An example:</p>
                              <table width="90%">
                                 <caption>Example 18. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>let aQuantity: PhysicalQuantity = Factory.PhysicalQuantity("76 kg")
						
Where "76 kg" is the literal form of an instance of PhysicalQuantity, 
with 76 being the value and "kg" being the code for kilogram 
in the Unified Code for Units of Measure (UCUM).
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Scope"></a>5.5.2 </span><span class="title">Scope of Declarations</span></div>
                           <div class="body">
                              <p>The scope of a declaration is the portion of a program where the declared entity is valid and can be referred to. 
                                 					The scoping rules must be defined separately by each standard. 
                              </p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="DefConst"></a>5.6 </span><span class="title"> &lt;&lt;definition&gt;&gt; Constraint</span></div>
                     <div class="body">
                        <p>&lt;&lt;definition&gt;&gt; constraints must be attached to a classifier and may only contain let definitions. 
                           				All variables and operations defined in the &lt;&lt;definition&gt;&gt; constraint are known in the same context as if they 
                           				were properties of the classifier, and can be used in the same manner. In a way, these &lt;&lt;definition&gt;&gt; constraints 
                           				become pseudo-attributes and &#8211;operations of the classifier, and can be used in a GELLO expression in the same way 
                           				attributes of a classifier are used. The notation for &lt;&lt;definition&gt;&gt; is as follows. Note the use of &#8216;def&#8217; keyword:
                        </p>
                        <table width="90%">
                           <caption>Example 19. </caption>
                           <tr>
                              <td class="example"><pre><pre>context Patient def:
   let varName: type = Expression.
				   </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Reflection"></a>5.7 </span><span class="title">Reflection</span></div>
                     <div class="body">
                        <p>Within OCL, there are properties that apply to all objects in the underlying data model. Reflection properties can be used
                           to determine:
                        </p>
                        <p></p>
                        <ul style="margin-left:20px;">
                           <li>The direct type of an object/variable</li>
                           <li>The supertype of an object</li>
                        </ul>
                        <p></p>
                        <p>The following operations from OCL have been incorporated into GELLO:</p>
                        <ul style="margin-left:20px;">
                           <li>object.oclTypeOf(t: OclType): Boolean</li>
                           <li>The evaluation of oclTypeOf returns true if the direct type of the object and t are the same:  
                              					aPerson.oclTypeOf(t: Person)  returns true if Person is the direct type of aPerson.
                           </li>
                           <li>object.oclKindOf(t: OclType): Boolean</li>
                        </ul>
                        <p></p>
                        <p>Similarly, the evaluation of oclKindOf returns true if the t is either the direct type or one of the supertypes of
                           				 an object: aPatient.oclKindOf(t: Person) returns true if Person is either a direct type or a supertype of aPatient.
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Casting"></a>5.8 </span><span class="title">Casting</span></div>
                     <div class="body">
                        <p>Every expression written in GELLO must have a type that is matched to a built-in or a model type. It is possible 
                           				however, to change the type of an expression into another type depending on the context in which such an expression 
                           				occurs. A specific conversion from type A to type B allows an expression of type A to be treated as type B. This is called
                           
                           				casting and OCL provides an operation that has been incorporated into GELLO:  oclAsType. 
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="BuiltInOps"></a>5.9 </span><span class="title">Built-in Operators</span></div>
                     <div class="body">
                        <p>Infix operators are allowed in GELLO. Operator precedence is as defined in §&#8206;5.12 and the OCL specification (see page 2.8
                           <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">OCL</a>).  The following arithmetic operators are supported by GELLO. Other infix operators are allowed if and only if the used model
                           type defines those operators with the correct signature.
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ArithOps"></a>5.9.1 </span><span class="title">Arithmetic Operators "+", "-", "*"</span></div>
                           <div class="body">
                              <p>This section presents the evaluation function for "+" and the allowed types. The types for "-", and "*" are the same as those
                                 for "+", and so is the evaluation function (see page 5.11 <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf"> OCL</a>). The evaluation function for "+" is defined as follows:
                              </p>
                              <table width="90%">
                                 <caption>Example 20. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
F+(V1,V2)= V1 + V2     If V1 and V2 are both integers or reals
         = undefined   otherwise 

Types for "+":
&#8226; (integer x integer) &#8594; integer
&#8226; (integer x real) &#8594; real
&#8226; (real x integer) &#8594; real
&#8226; (real x real) &#8594; real
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="divOp"></a>5.9.2 </span><span class="title">Arithmetic Operator "/"</span></div>
                           <div class="body">
                              <p>The result of a division is always a real number even if the arguments are integers.</p>
                              <table width="90%">
                                 <caption>Example 21. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
		
F/ (V1,V2)= V1 / V2     If V1 and V2 are either integers or reals, and V2 &lt;&gt; 0
          = undefined   otherwise 

Types for "/":
&#8226; (integer x integer) &#8594; real
&#8226; (integer x real) &#8594; real
&#8226; (real x integer) &#8594; real
&#8226; (real x real) &#8594; real
</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="modOp"></a>5.9.3 </span><span class="title">Arithmetic Operators "div" and "mod"</span></div>
                           <div class="body">
                              <p>The result of integer division "div", and modulus "mod" operations is always an integer number. The arguments must both be
                                 integers. The following is the evaluation function and allowed types for integer division. The same applies for modulus. 
                              </p>
                              <table width="90%">
                                 <caption>Example 22. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fdiv(V1,V2)= V1 div V2     If V1 and V2 are both integers and V2 &lt;&gt; 0
           = undefined     otherwise 

Type "div" and "mod":
&#8226; (integer x integer) &#8594; integer	
					</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="unaryMinusOp"></a>5.9.4 </span><span class="title">Arithmetic Operator unary minus "-"  </span></div>
                           <div class="body">
                              <p>The following are the evaluation function and allowed types for unary minus.</p>
                              <table width="90%">
                                 <caption>Example 23. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
					
F-(V1)= -V1         If V1 is either an integer or a real 
      = undefined   otherwise 

Types for unary minus "-":
&#8226; (integer) &#8594; integer
&#8226; (real) &#8594; real
					</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="compOps"></a>5.9.5 </span><span class="title">Comparison Operators "=", "&gt;", "&lt;", "&gt;=", "&lt;=", "&lt;&gt;"</span></div>
                           <div class="body">
                              <p>The allowed types and evaluation rule for the operators "=", "&gt;", "&lt;", "&gt;=", "&lt;=", "&lt;&gt;" are as follows. All these operators
                                 return undefined if one or both of the comparands is undefined.
                              </p>
                              <table width="90%">
                                 <caption>Example 24. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
					
Types for "=", "&gt;", "&lt;", "&gt;=", "&lt;=", "&gt;&lt;":
&#8226; (real x real)&#8594; truth_value   
&#8226; (real x integer)&#8594; truth_value   
&#8226; (integer x real)&#8594;  truth_value   
&#8226; (integer x integer)&#8594; truth_value
&#8226; (string x string)&#8594; truth_value       Only valid for "=" and &lt;&gt; 
&#8226; (boolean x boolean)&#8594; truth_value     Only valid for "=" and &lt;&gt;  
					</pre></pre></td>
                                 </tr>
                              </table>
                              <p>Definition of the evaluation function F&gt; (V1, V2). The evaluation function is the same for the other operators:</p>
                              <table width="90%">
                                 <caption>Example 25. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
F&gt;(V1,V2)= true        If V1 and V2  are both either integers or reals and V1 &gt; V2 
         = false       Else if V1 and V2 are both either integers or reals and V1 &#8804; V2
         = undefined   otherwise 
					</pre></pre></td>
                                 </tr>
                              </table>
                              <p>Note: for the cases (real x integer) and (integer x real) there is an implicit casting of integer to real, hence both cases
                                 are evaluated as (real x real) after casting.
                              </p>
                              <p>Definition of the evaluation function F= (V1, V2). The evaluation function is the same for F&lt;&gt; (V1, V2) when the operators
                                 are both strings of Booleans.
                              </p>
                              <table width="90%">
                                 <caption>Example 26. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
F=(V1,V2)= true         If V1 and V2  are both strings or Booleans  and V1 = V2 
         = false        Else if V1 and V2  are both strings or Booleans  and V1 &lt;&gt; V2
         = undefined    otherwise 
					</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="absMathOp"></a>5.9.6 </span><span class="title"> Mathematical Operator "abs"</span></div>
                           <div class="body">
                              <p>The mathematical operator "abs" returns the absolute value of a number.</p>
                              <table width="90%">
                                 <caption>Example 27. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fabs(V1)= V1          If V1 is  a positive integer or real number
	= -V1         Else if V1 is a negative integer or real number
        = undefined   otherwise 

Type "abs"
&#8226; (integer) &#8594; integer	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="acosMathOp"></a>5.9.7 </span><span class="title"> Mathematical Operator "acos"</span></div>
                           <div class="body">
                              <p>The mathematical operator "acos" returns the arc cosine of an angle in the range of 0.0 through pi. If the argument is not
                                 a number, is undefined or its absolute value is "&gt;" 1, the the returning value is undefined
                              </p>
                              <table width="90%">
                                 <caption>Example 28. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Facos(V1)= acos(V1)    If V1 is  an  integer or real number and abs(V1) &#8804; 1
         = undefined   otherwise 

Type "acos"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="asinMathOp"></a>5.9.8 </span><span class="title"> Mathematical Operator "asin"</span></div>
                           <div class="body">
                              <p>The mathematical operator "asin" returns the arc sine of an angle, in the range of -pi/2 through pi/2.</p>
                              <table width="90%">
                                 <caption>Example 29. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fasin(V1)= asin(V1)    If V1 is  an  integer or real number and abs(V1) &#8804; 1
         = 0           Else if V1 = 0
         = undefined   otherwise 

Type "asin"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="atanMathOp"></a>5.9.9 </span><span class="title"> Mathematical Operator "atan"</span></div>
                           <div class="body">
                              <p>The mathematical operator "atan" returns the arc tangent of an angle, in the range of -pi/2 through pi/2.</p>
                              <table width="90%">
                                 <caption>Example 30. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fatan(V1)= atan(V1)    If V1 is  an  integer or real number and abs(V1) &#8804; 1
         = 0           Else if V1 = 0
         = undefined   otherwise 

Type "atan"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ceilingMathOp"></a>5.9.10 </span><span class="title"> Mathematical Operator "ceiling"</span></div>
                           <div class="body">
                              <p>The mathematical operator "ceiling" returns the smallest integer value that is not less than the argument.</p>
                              <table width="90%">
                                 <caption>Example 31. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fceiling(V1)= ceiling(V1) If V1 is  a real
            = V1          Else if V1 an  integer 
            = 0           Else if V1 = 0
            = -0          Else if V1 &lt; 0 and V1 &gt; -1.0
            = undefined   otherwise 

Type "ceiling"
&#8226; (integer) &#8594; integer	
&#8226; (real) &#8594; integer	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="cosMathOp"></a>5.9.11 </span><span class="title"> Mathematical Operator "cos"</span></div>
                           <div class="body">
                              <p>The mathematical operator "cos" returns the trigonometric cosine of an angle.</p>
                              <table width="90%">
                                 <caption>Example 32. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fcos(V1)= cos(V1)    If V1 is  an  integer or real number and V1 is the value of an angle in radians
        = undefined  otherwise 

Type "cos"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="expMathOp"></a>5.9.12 </span><span class="title"> Mathematical Operator "exp"</span></div>
                           <div class="body">
                              <p>The mathematical operator "exp" returns the value e^a, where e is the base of the natural logarithms..</p>
                              <table width="90%">
                                 <caption>Example 33. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fexp(V1)= e^(V1)       If V1 is  an  integer or real number 
         = + infinity  Else if V1 is positive infinity
         = 0           Else if V1 is negative infinity
         = undefined   otherwise 

Type "exp"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="floorMathOp"></a>5.9.13 </span><span class="title"> Mathematical Operator "floor"</span></div>
                           <div class="body">
                              <p>The mathematical operator "floor" returns the largest integer value that is not greater than the argument.</p>
                              <table width="90%">
                                 <caption>Example 34. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Ffloor(V1)= floor(V1)   If V1 is a real number
          = V1          Else if V1 an integer number
          = V1          Else if V1= 0 or V1= infinity
          = undefined   otherwise 

Type "floor"
&#8226; (integer) &#8594; integer	
&#8226; (real) &#8594; integer	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="logMathOp"></a>5.9.14 </span><span class="title"> Mathematical Operator "log"</span></div>
                           <div class="body">
                              <p>The mathematical operator "log" returns the natural logarithm (base e) of a number.</p>
                              <table width="90%">
                                 <caption>Example 35. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Flog(V1)= log(V1)      If V1 is  an  integer or real number &gt; 0
        = + infinity   Else if V1 is positive infinity
        = - infinity   Else if V1 = 0
        = undefined    otherwise 

Type "log"
&#8226; (integer) &#8594; real	
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="maxMathOp"></a>5.9.15 </span><span class="title"> Mathematical Operator "max"</span></div>
                           <div class="body">
                              <p>The mathematical operator "max" returns the greater of two numbers.</p>
                              <table width="90%">
                                 <caption>Example 36. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fmax(V1,V2)= V1          If V1 &gt; V2
           = V1          Else if V1 = V2
           = V2          Else if V2 &gt; V1
           = undefined   otherwise 

Type "max"
&#8226; (integer x integer) &#8594; integer
&#8226; (integer x real) &#8594; real
&#8226; (real x integer) &#8594; real
&#8226; (real x real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="minMathOp"></a>5.9.16 </span><span class="title"> Mathematical Operator "min"</span></div>
                           <div class="body">
                              <p>The mathematical operator "min" returns the smaller of two numbers.</p>
                              <table width="90%">
                                 <caption>Example 37. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fmin(V1,V2)= V1          If V1 &lt; V2
           = V1          Else if V1 = V2
           = V2          Else if V2 &lt; V1
           = undefined   otherwise 

Type "min"
&#8226; (integer x integer) &#8594; integer
&#8226; (integer x real) &#8594; real
&#8226; (real x integer) &#8594; real
&#8226; (real x real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="powMathOp"></a>5.9.17 </span><span class="title"> Mathematical Operator "power"</span></div>
                           <div class="body">
                              <p>The mathematical operator "power" returns the value of the first argument raised to the power of the value of the second argument</p>
                              <table width="90%">
                                 <caption>Example 38. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fpower(V1,V2)= V1^V2         If V1 and V2 are valid arguments
             = 1             Else if V2= 0
             = V1            Else if V2= 1
             = abs(V1)^V2    Else if V1&lt; 0 and V2 is a finite even integer
             = -(abs(V1)^V2) Else if V1&lt; 0 and V2 is a finite odd integer
             = undefined     Else if V1&lt; 0 and V2 finite and not an integer
             = undefined     Else if V2 is undefined
             = undefined     Else if V1 is undefined and V2!= 0
             = + infinity    Else if abs(V1)&gt; 1 and V2= + infinity 
             = + infinity    Else if V1= 0 and V2&lt; 0 or V1= + infinity and V2&gt; 0
             = + infinity    Else if V1= -0 and V2&lt; 0 and V2 is negative finite odd integer  or  
                             V1= -infinity and V2&gt; 0 and V2 != finite odd integer  
             = - infinity    Else if V1=-0 and V2 is a negative finite odd integer  or V1= -infinity and 
                             V2 is a positive finite odd integer                     
             = 0             Else if abs(V1)&gt; 1 and V2 = -infinity or abs(V1)&lt; 1 and V2 = +infinity
             = 0             Else if V1=0 and V2&gt; 0 or V1=+ infinity and V2&lt; 0
             = 0             Else if V1= -0 and V2&gt; 0 and V2!= finite odd number  or V1= -infinity 
                             and V2&lt; 0 and V2!= finite odd integer 
             = -0            Else if V1=-0 and  V2= positive odd number or V1= -infinity  and V2  is  
                             a negative odd integer                  
             = V2            Else if V2&lt; V1
             = undefined     otherwise 

Type "power"
&#8226; (integer x integer) &#8594; integer
&#8226; (integer x real) &#8594; real
&#8226; (real x integer) &#8594; real
&#8226; (real x real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="randMathOp"></a>5.9.18 </span><span class="title"> Mathematical Operator "rand"</span></div>
                           <div class="body">
                              <p>The mathematical operator "rand" returns a positive real number in the range [0.0, 1.0).</p>
                              <table width="90%">
                                 <caption>Example 39. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Frand()= V1   Where 0.0 &#8804; V1 &lt; 1.0

Type "rand"
&#8226; () &#8594; real</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="sinMathOp"></a>5.9.19 </span><span class="title"> Mathematical Operator "sin"</span></div>
                           <div class="body">
                              <p>The mathematical operator "sin" returns the trigonometric sine of an angle.</p>
                              <table width="90%">
                                 <caption>Example 40. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fsin(V1)=  sin(V1)    If V1 is an integer or real number representing the value of an angle in radians
        = 0           Else if V1 = 0
        = undefined   otherwise 

Type "sin"
&#8226; (integer) &#8594; real
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="sqrtMathOp"></a>5.9.20 </span><span class="title"> Mathematical Operator "sqrt"</span></div>
                           <div class="body">
                              <p>The mathematical operator "sqrt" returns the square root of a number.</p>
                              <table width="90%">
                                 <caption>Example 41. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Fsqrt(V1)=  +sqrt(V1)  If V1 is an integer or real number and V1 &gt;= 0
         = 0           Else if V1 = 0
         = undefined   Else if V1 &lt; 0
         = undefined   otherwise 

Type "sqrt"
&#8226; (integer) &#8594; real
&#8226; (integer) &#8594; integer
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="tanMathOp"></a>5.9.21 </span><span class="title"> Mathematical Operator "tan"</span></div>
                           <div class="body">
                              <p>The mathematical operator "tan" returns the trigonometric tangent of an angle.</p>
                              <table width="90%">
                                 <caption>Example 42. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Ftan(V1)=  tan(V1)    If V1 is an integer or real number representing the value of an angle in radians
        = 0           Else if V1 = 0
        = undefined   otherwise 

Type "tan"
&#8226; (integer) &#8594; real
&#8226; (real) &#8594; real	</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="BooleanOps"></a>5.9.22 </span><span class="title">Boolean Operators</span></div>
                           <div class="body">
                              <p>The valid types and evaluation functions for Boolean operators "and", "or", "xor" and "not" are given as follows:</p>
                              <table width="90%">
                                 <caption>Example 43. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Types for "and", "or", "xor"and "implies":
(truth_value x truth_value) &#8594; truth_value

Types for "not":
(truth_value) &#8594; truth_value
					</pre></pre></td>
                                 </tr>
                              </table>
                              <p>Values of the evaluation functions (as in <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">OCL p5.12</a>):
                              </p>
                              <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                                 <caption><a name="truthValues"> </a>
                                    			Table
                                    			6: Truth Values for Logic Operators
                                 </caption>
                                 <tbody>
                                    <tr>
                                       <th colspan="1">V1</th>
                                       <th colspan="1">V2</th>
                                       <th colspan="1">V1 and V2</th>
                                       <th colspan="1">V1 or V2</th>
                                       <th colspan="1">V1 xor V2</th>
                                       <th colspan="1">not V1</th>
                                       <th colspan="1">V1 implies V2</th>
                                    </tr>
                                    <tr>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">false</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">true</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">true</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">false</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">true</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">true</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">unknown</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">false</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">true</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">true</td>
                                    </tr>
                                    <tr>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                       <td colspan="1">unknown</td>
                                    </tr>
                                 </tbody>
                              </table>
                              <p>A note on truth values and Boolean operators: GELLO is intended to support extended truth values: true, false and unknown,
                                 while HL7 Boolean values in the HL7 RIM data model are true, false and NULL. The discrepancy between unknown and NULL is resolved
                                 by the UML ITS.
                              </p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="StringOps"></a>5.9.23 </span><span class="title">String Operators "size", "concat", "toUpper", "toLower" "substring", "=" and "&lt;&gt;"</span></div>
                           <div class="body">
                              <p>The types and evaluation functions for string operators are given as follows:</p>
                              <table width="90%">
                                 <caption>Example 44. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Type for "size"
&#8226; (string) &#8594;  integer

Definition of evaluation function for Fsize(V)
Fsize(V)= integer       If V is a string  
        = undefined 	otherwise

Type for "concat"
&#8226; (string x string) &#8594;  string

Definition of evaluation function for Fconcat(V1, V2)
Fconcat(V1, V2)= string      If V1 and V2 are both strings  
               = undefined   otherwise

Type for "toUpper", "toLower" 
&#8226; (string) &#8594;  string

Definition of evaluation function for FtoUpper(V). The same applied for "toLower" operator.
FtoUpper(V)= string all in upper characters     If V is a string  
           = undefined      otherwise

Type for "substring"
&#8226; (string x integer x iinteger) &#8594;  string

Definition of evaluation function for Fsubstring(V1,V2,V3)
Fsubstring(V1,V2,V3)=  returns a substring of length V3, at a given starting point V2. 
                     &#8226;  V1 is a string and V2 and V3 are integers
               If    &#8226;  0 &#8804; V2 &lt; size(v1)
                     &#8226;  0 &#8804; V3 &lt; size(v1)
                     &#8226;  V2 + V3 &#8804; size(V1)
                    = undefined     otherwise
	                
Type for "=" and "&lt;&gt;"
&#8226; (string x string) &#8594;  truth_value     

Definition of the evaluation function F= (V1, V2). The evaluation function is the same for
F&lt;&gt; (V1, V2) when the operands are both strings.

F=(V1,V2) = true         If V1 and V2  are both strings and V1 = V2 
          = false        Else if V1 and V2 are both strings and V1 &lt;&gt; V2
          = undefined    otherwise
							</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="StringOps2"></a>5.9.24 </span><span class="title">String Operators "tochar", "lpad", "rpad", "rtrim", "ltrim" and "replace"</span></div>
                           <div class="body">
                              <p>The types and evaluation functions for string operators are given as follows:</p>
                              <table width="90%">
                                 <caption>Example 45. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>Type for "tochar"
&#8226; (integer) &#8594;  string
&#8226; (real) &#8594;  string

Definition of evaluation function for Ftochar(V)
Fsize(V)= string       If V is an integer or a real number 
        = undefined    otherwise

Type for "lpad", "rpad" 
&#8226; (string x integer x string) &#8594;  string

Definition of evaluation function for Flpad(V). The same applies for "rpad" operator.
Flpad(V1, V2, V3)= string     If V1 is a string that could be padded on its left, 
                              V2 is an integer denoting the length to pad the text to, 
                              and V3 is a string to path with  
                 = undefined  otherwise

Type for "ltrim", "rtrim"
&#8226; (string x string) &#8594;  string

Definition of evaluation function for Fltrim(V1,V2). The same applies for "rtrim" operator.
Fltrim(V1,V2)= string     If V1 and V2 are strings. The resulting string 
                          has all the ocurrences of V2 that appear on 
                          the left removed
             = undefined  otherwise
	                
Type for "replace"
&#8226; (string x string x string) &#8594;  string    

Definition of the evaluation function Freplace (V1, V2,V3). 

F=(V1,V2,V3) = string       If V1, V2 and V3  are strings. The function returns a new 
                            string resulting from replacing in V1 all the ocurrences 
                            of V2 with V3
             = undefined    otherwise
							</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="CollOps"></a>5.10 </span><span class="title">Collection Operators</span></div>
                     <div class="body">
                        <p>GELLO incorporates from OCL standard operations to handle elements in collections. These operations take the 
                           				elements in a collection and evaluate a GELLO expression on each of them. These operators are described in the following
                           
                           				sections: select (§&#8206;5.10.3), reject (§&#8206;5.10.4), collect (§&#8206;5.10.5), forAll (§&#8206;5.10.6), iterate (§&#8206;5.10.7), exists (§&#8206;5.10.8)
                           and flatten (§&#8206;5.10.9).
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ArrowNotation"></a>5.10.1 </span><span class="title">The &#8216;Arrow&#8217; Notation</span></div>
                           <div class="body">
                              <p>All operations on collections in GELLO are denoted with the &#8216;arrow&#8217; &#8594;  notation. The &#8216;arrow&#8217; notation distinguishes a 
                                 					collection operation from a model type operation. Hence the notation is as follows:
                              </p>
                              <table width="90%">
                                 <caption>Example 46. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; collectionOperator(parameters)
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="SingleInstances"></a>5.10.2 </span><span class="title">Single Instances as Collections</span></div>
                           <div class="body">
                              <p>GELLO treats a single instance as a collection with only one element. This allows us to apply collection operators to instances.
                                 
                                 					The type definition for collection operators will treat a single instance as a collection with one element, as specified
                                 in this section. 
                                 					The notation is the same as in (§&#8206;5.10.1):
                              </p>
                              <table width="90%">
                                 <caption>Example 47. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   singleInstance &#8594; collectionOperator(parameters)
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpSelect"></a>5.10.3 </span><span class="title">Operator Select</span></div>
                           <div class="body">
                              <p>Select is an operator to specify a selection from a specific collection. Select returns all the elements in a collection that
                                 satisfy a criterion. 
                                 					There are three different forms, of which the simplest one is: 
                              </p>
                              <table width="90%">
                                 <caption>Example 48. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; select( boolean-expression ) 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The result of the select operation, in the context of a complete repository of patient records, is a 
                                 					collection of problem list instances with problem code = "123":
                              </p>
                              <table width="90%">
                                 <caption>Example 49. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   patient.problemList &#8594; select(code = "123")			

This results in a collection that contains all the elements from collection for which the 
boolean-expression evaluates to true. For each element in collection the expression 
boolean-expression evaluates over a property of the elements in the collection. 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>A more general syntax for the select expression:</p>
                              <table width="90%">
                                 <caption>Example 50. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; select( v | boolean-expression-with-v )

The variable v, called the iterator, is a reference to an object in the collection. v iterates over 
the collection and the boolean-expression-with-v is evaluated for each v. The third form is an 
extension of the latest, where the type of the variable v can be specified. The notation is:

collection &#8594; select( v : Type | boolean-expression-with-v)
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The notation for all variants is:</p>
                              <table width="90%">
                                 <caption>Example 51. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
collection(select x BooleanExpression)
collection &#8594; select( v | boolean-expression-with-v)
collection &#8594;select( v : Type | boolean-expression-with-v)

Type for "select"
   (collection x Boolean Expression) &#8594; collection

Definition of evaluation function for Fselect(V,E)
Fselect(V,E)= collection     If V is a collection  and E is a valid GELLO Boolean expression. 
                             The resulting collection contains all the elements from V for which the 
                             Boolean expression E evaluates to true
            = undefined      otherwise

collection &#8594; select(v | BooleanExpression-with-v)

Type for "select"
   (collection x Iterator x Boolean Expression) &#8594; collection
   
Definition of evaluation function for Fselect(V,I,E)
Fselect(V,I,E)= collection     If V is a collection, I is the iterator referring to the object from 	
                               the collection and E is a valid GELLO Boolean expression. 	
                               The resulting collection contains all the elements from V for which the 
                               Boolean expression E evaluates to true
              = undefined      otherwise

collection &#8594; select(v:Type | BooleanExpression-with-v)

Type for "select"
(collection x  Iterator x Type x Boolean Expression)  &#8594; collection

Definition of evaluation function for Fselect(V,I,T,E)
Fselect(V,I,E)= collection      If V is a collection, I is the iterator with Type T referring to 	
                                the object from the collection and E is a valid GELLO Boolean 
                                expression. 
                                The resulting collection contains all the elements from V for which 
                                the Boolean expression E evaluates to true
              = undefined       otherwise
					 </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpReject"></a>5.10.4 </span><span class="title">Operator Reject  </span></div>
                           <div class="body">
                              <p>The Boolean expression evaluates over a property of the elements in the collection, returning all the elements that do not
                                 satisfy such condition (all elements that evaluate to False).
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 52. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection&#8594; reject(BooleanExpression)
   collection&#8594; reject( v : Type | boolean-expression-with-v )
   collection&#8594; reject( v | boolean-expression-with-v )

Type for "reject"
 (collection x Boolean Expression)&#8594; collection

Definition of evaluation function for Freject(V,E)
Freject(V,E)= collection      If V is a collection  and E is a valid GELLO Boolean 
                              expression. The resulting collection contains all the elements
                              from V for which the Boolean expression E evaluates to false
            = undefined	      otherwise

collection&#8594; reject(v | BooleanExpression-with-v)

Type for "reject"
 (collection x Iterator x Boolean Expression)&#8594; collection

Definition of evaluation function for Freject(V,I,E)
Freject(V,I,E)= collection      If V is a collection, I is the iterator referring to the object 
                                from the collection and E is a valid GELLO Boolean expression. 	
                                The resulting collection contains all the elements
                                from V for which the Boolean expression E evaluates to false
              = undefined       otherwise

collection &#8594; reject(v:Type | BooleanExpression-with-v)

Type for "reject"
  (collection x Iterator x Type(Boolean Expression) &#8594; collection

Definition of evaluation function for Freject(V,I,T,E)
Freject(V,I,E)= collection      If V is a collection, I is the iterator with Type T referring to
                                the object from the collection and E is a valid 
                                GELLO Boolean expression. The resulting collection contains all 
                                the elements from V for which the Boolean expression E evaluates 
                                to false                
              = undefined 	otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The result of reject in the following example is a collection of patients who do not have problem code = "123" in their problem
                                 list:
                              </p>
                              <table width="90%">
                                 <caption>Example 53. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   patient.problemList&#8594; reject(code = "123")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpCollect"></a>5.10.5 </span><span class="title">Operator Collect </span></div>
                           <div class="body">
                              <p>Collect iterates over a collection, computes a value for each element of the collection, and gathers the evaluated values
                                 into a new collection. The type of the elements of the resulting collection is usually different from the type of the elements
                                 in the original collection over which the operator is applied. The collect operation uses the same syntax as the select and
                                 reject operators.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 54. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection&#8594; collect(Expression)
   collection&#8594; collect( v | expression-with-v )
   collection&#8594; collect( v : Type | expression-with-v )

Type for "collect"
   (set x Expression)&#8594; bag
   (bag x Expression) &#8594; bag
   (sequence x Expression)&#8594; sequence

Definition of evaluation function for Fcollect(V,E)
Fcollect(V,E)= collection     If V is a collection  and E is an expression that is 
                              evaluated for each element in to collection.
             = undefined      otherwise

Type for "collect"
   (set x Iterator x Expression) &#8594; bag
   (bag x Iterator x Expression) &#8594; bag
   (sequence x Iterator x Expression)&#8594; sequence

Definition of evaluation function for Fcollect(V,I,E)
Fcollect(V,I,E)= collection     If V is a collection, I is the iterator referring to the 
                                object from the collection and E is a valid GELLO expression. 
                                The resulting collection contains the results of evaluating E 
                                for each element of V.
               = undefined      otherwise
     
   collection&#8594; collect(v:Type | Expression-with-v)
 
 Type for "collect"
   (set x Iterator x Type x Expression)&#8594; bag
   (bag x Iterator x Type x Expression)&#8594; bag
   (sequence x Iterator x Type x Expression)&#8594; sequence
 
 Definition of evaluation function for Fcollect(V,I,T,E)
 Fcollect(V,I,E)= collection   If V is a collection, I is the iterator with Type T referring 
                               to the object from the collection and E is a valid GELLO 
                               Expression. The resulting collection contains the result of 
                               evaluating E for each element of V.
                = undefined    otherwise
				 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection lab result values for creatinine:</p>
                              <table width="90%">
                                 <caption>Example 55. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   LabResult&#8594; select(code = "CRE")&#8594; collect(value)
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpForAll"></a>5.10.6 </span><span class="title">Operator ForAll  </span></div>
                           <div class="body">
                              <p>ForAll is used to specify a Boolean expression that evaluates the value of a property over all the elements of a collection.
                                 The result of the Boolean expression is true if all the elements of the collection evaluate to true. If the Boolean expression
                                 is false for one or more elements of the collection, then the complete expression evaluates to false. 
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 56. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection&#8594; forAll(Boolean Expression) 
   collection&#8594; forAll( v | boolean-expression-with-v )
   collection&#8594; forAll( v : Type | boolean-expression-with-v )

Type for "forAll"
    (collection x Boolean Expression)&#8594; truth_value

Definition of evaluation function for FforAll(V,E)
FforAll(V,E) = true       If V is a collection  and E is a valid GELLO Boolean expression 
                          containing a property of the elements, and this expression evaluates 
                          to true for all elements in the collection
             = false      If V is a collection and E is a valid GELLO Boolean expression containing
                          a property of the elements, and there is at least one element for which 
                          the expression E evaluates to false. 
             = undefined  otherwise

   collection&#8594; forAll(v | BooleanExpression-with-v) 
 
Type for "forAll"
   (collection x Iterator x Boolean Expression)&#8594; truth_value

Definition of evaluation function for FforAll(V,I,E)
FforAll(V,I,E)= true       If V is a collection, I is the iterator referring to the object from the 
                           collection and E is a valid GELLO Boolean expression containing a 
                           property of the elements, and this expression evaluates to true for all
                           elements in the collection.
              = false      If V is a collection I is the iterator referring to the object from the 
                           collection and E is a valid GELLO Boolean expression containing a property 
                           of the elements, and there is at least one element for which the expression 
                           E evaluates to false. 
              = undefined  otherwise

collection &#8594; forAll(v:Type | BooleanExpression-with-v)

Type for "forAll"
   (collection x Iterator x Type(Boolean Expression) &#8594; truth_value

Definition of evaluation function for FforAll(V,I,T,E)
FforAll(V,I,E)= true         If V is a collection, I is the iterator with type T referring to the object 
                             from the collection and E is  a valid GELLO Boolean expression containing 
                             a property of the elements, and this expression evaluates to true for all 
                             elements in the collection.
              = false        If V is a collection I is the iterator referring to the object from the 
                             collection and E is a valid GELLO Boolean expression containing a 
                             property of the elements, and there is at least one element for which 
                             the expression E evaluates to false.
              = undefined    otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if all the lab results are for creatinine:</p>
                              <table width="90%">
                                 <caption>Example 57. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   LabResult &#8594; forAll(code = "CRE")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIterate"></a>5.10.7 </span><span class="title">Operator Iterate</span></div>
                           <div class="body">
                              <p>Iterate is a generic operator. It iterates over a collection of elements elem evaluating each element against a valid GELLO
                                 expression expression-with-elem-and-result. The result of the expression-with-elem-and-result is stored in result. The initial
                                 value of result is defined by expression. Once iterate goes through the whole collection, it returns result.  
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 58. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection  &#8594; iterate(elem: Type; result: Type = expression | 
                         expression-with-elem-and-result)

Type for "iterate"
   (collection x elementName x elementType x resultName x resultType x expression x  
                         expression-with-elem-and-result)  &#8594; resultType

Definition of evaluation function for Fiterate(V,S,T1,R,T2,E1,E2)
Fiterate(V,S,T1,R,T2,E1,E2)= DataType      If V is a collection, S is an iterator variable of type T1, 
                                           R is a variable of type T2, E1 is a valid GELLO expression 
                                           defining the initial value of R and E2 is a valid GELLO 
                                           expression that is evaluated for each element S in the 
                                           collection. The evaluated value of E2 is stored in R. 
                                           The final result once the iteration is over is the value of R.
                           = undefined     otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the number of times creatinine occurs in the collection LabResult:</p>
                              <table width="90%">
                                 <caption>Example 59. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   LabResult  &#8594; iterate(code, acc: Integer = 0 | if code = "CRE" then acc + 1 else acc endif)
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpExists"></a>5.10.8 </span><span class="title">Operator Exists</span></div>
                           <div class="body">
                              <p>Exists returns true if there is at least one element in the collection that satisfies the Boolean expression.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 60. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; exists(BooleanExpression)
   collection &#8594; exists( v | boolean-expression-with-v )
   collection &#8594; exists( v : Type | boolean-expression-with-v)
 
 Type for "exists" 
    (collection x BooleanExpression) &#8594; truth_value 
 
Definition of evaluation function for Fexists(V,E)
Fexists(V,E)= true        If V is a collection E is a valid GELLO Boolean expression containing 
                          a property of the elements, and there is al least  one element
                          in the collection V that satisfies E.
            = false       If V is a collection E is a valid GELLO Boolean expression containing a 
                          property of the elements, and none of the elements in the collection V 
                          satisfies E.
            = undefined   otherwise

Type for "exists"
 (collection x Iterator x Boolean Expression) &#8594;  truth_value

Definition of evaluation function for Fexists(V,I,E)
Fexists(V,I,E) = true          If V is a collection, I is the iterator referring to the object 
                               from the collection and E is a valid GELLO Boolean expression 
                               containing a property of the elements and there is at least one 
                               element in the collection V for which E evaluates to true.
               = false         If V is a collection I is the iterator referring to the object from 
                               the collection and E is a valid GELLO and  there is no element in 
                               the collection V such that E evaluates to true for that element 
               = undefined     otherwise 
 
 collection &#8594; existsl(v:Type | BooleanExpression-with-v) 
 
 Type for "exists" 
     (collectionIterator x Type x Boolean Expression) &#8594; truth_value 
 
 Definition of evaluation function for Fexists(V,I,T,E) 
 Fexists(V,I,E)= true          If V is a collection, I is the iterator with type T referring 
                              to the object from the collection and E is a valid GELLO Boolean 
                              expression containing a property of the elements and there is 
                              at least one element in the collection V for which E evaluates to true.
               = false          If V is a collection I is the iterator referring to the object 
                               from the collection and E is a valid GELLO Boolean expression 
                               containing a property of the elements, and there is no element 
                               in the collection V such that E evaluates to true for that element
               = undefined     otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if there is at least one lab result for creatinine:</p>
                              <table width="90%">
                                 <caption>Example 61. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   LabResult &#8594; exists(code = "CRE")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpFlatten"></a>5.10.9 </span><span class="title">Operator Flatten</span></div>
                           <div class="body">
                              <p>Flatten returns a collection without any nested elements. If the resulting type is a collection, the operator is applied recursively
                                 until the return type is a collection without nested collections.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 62. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; flatten()

Type for "flatten" 
   (collection)  &#8594; collection 

Definition of evaluation function for Fflatten(V) 
Fflatten(V) = collection     If V is a collection, the result is a collection containing all the 
                             elements of V.  If V is a set, bag, or sequence, then Fflatten(V) is 
                             a set, bag, or sequence respectively.
            = element        If V is not a collection.
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>	The result of using flatten in the following example is the collection {1, 2, 3, 4, 5}:</p>
                              <table width="90%">
                                 <caption>Example 63. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   {1, 2, {3}, {{4},{5}} &#8594; flatten()
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpSize"></a>5.10.10 </span><span class="title">Operator Size</span></div>
                           <div class="body">
                              <p>The operator size returns the number of elements in a collection. </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 64. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; size()

Types for "size"
   (collection) &#8594; integer

Definition of evaluation function for Fsize(V)
Fsize(V) = integer          If V is a collection 
         = undefined        otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the number problems the patient has in his problem list:</p>
                              <table width="90%">
                                 <caption>Example 65. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   patient.problemList &#8594; size()
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpCount"></a>5.10.11 </span><span class="title">Operator Count</span></div>
                           <div class="body">
                              <p>Count returns the number of occurrences of object in a collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 66. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; count(object)

Type for "count"
   (collection x object)  &#8594; integer

Definition of evaluation function for Fcount(V,O)
Fcount(V,O) = integer           If V is a collection  and O is a defined object
            = undefined 	otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the number of times the patient has had fever :</p>
                              <table width="90%">
                                 <caption>Example 67. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList  &#8594; collect(code) &#8594; count("fever")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpMinMax"></a>5.10.12 </span><span class="title">Operators "Max" and "Min"</span></div>
                           <div class="body">
                              <p>Max and min return the biggest and smallest value respectively in a collection. The collection must contain numbers. The following
                                 also applies for the min operator. 
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 68. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; max()

Type for "max"
   (collection)  &#8594; number

Definition of evaluation function for Fmax(V)
Fmax(V) = number        If V is a collection of numbers (integers or reals)
        = undefined 	otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <table width="90%">
                                 <caption>Example 69. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {2,5,1} &#8594; max()        returns 5
   {2,5,1} &#8594;  min()       returns 1
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIncludes"></a>5.10.13 </span><span class="title">Operator Includes</span></div>
                           <div class="body">
                              <p>Includes operator returns a true if the object is an element of the collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 70. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; includes(object)

Type for "includes"
   (collection x object) &#8594; truth_value 
 
Definition of evaluation function for Fincludes(V,O) 
Fincludes(V,O) = true         If V is a collection  and O is an element in the collection.  
               = false        Else if V is a collection and O is not an element V.  
               = undefined    otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if the patient has "fever" in problem list:</p>
                              <table width="90%">
                                 <caption>Example 71. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList &#8594;  collect(code) &#8594; includes("fever")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIncludesAll"></a>5.10.14 </span><span class="title">Operator IncludesAll</span></div>
                           <div class="body">
                              <p>IncludesAll returns true if all the elements in the parameter collection are in the current collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 72. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; includesAll(parameterCollection)

Types for "includesAll"
   (collection x singleInstance) &#8594; truth_value
   (collection x collection ) &#8594; truth_value
 
Definition of evaluation function for FincludesAll(V,C)
FincludesAll(V,C)= true         If both V and C are collections and all the elements in C 
                                 appear in V. 
                 = false         Else if V is a collection and there is at least one element in C 
                                 that does not appear in V.
                 = undefined     otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if the patient has "fever"and "rash" in problem list:</p>
                              <table width="90%">
                                 <caption>Example 73. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList &#8594; collect(code) &#8594; includesAll( SET{"fever", "rash"})
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIsEmpty"></a>5.10.15 </span><span class="title">Operator IsEmpty</span></div>
                           <div class="body">
                              <p>isEmpty returns true if the collection contains no elements.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 74. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; isEmpty()

Type for "isEmpty"
   (collection) &#8594; truth_value 

Definition of evaluation function for FisEmpty(V) 
 FisEmpty(V) = true          If V is a collection  with no elements
             = false         Else if V is a collection with one or more elements 
             = undefined     otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if the patient has no problems in problem list:</p>
                              <table width="90%">
                                 <caption>Example 75. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList &#8594; isEmpty()
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpNotEmpty"></a>5.10.16 </span><span class="title">Operator notEmpty</span></div>
                           <div class="body">
                              <p>notEmpty returns true if the collection contains one or more elements.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 76. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; notEmpty()

Type for "notEmpty" 
   (collection) &#8594; truth_value 
 
Definition of evaluation function for FnotEmpty(V) 
FnotEmpty(V) = true          If V is a collection  with one or more elements 
             = false	     Else if V is a collection with no elements 
             = undefined     otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns true if the patient has at least one problem in problem list:</p>
                              <table width="90%">
                                 <caption>Example 77. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   patient.problemList &#8594; notEmpty()
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpSum"></a>5.10.17 </span><span class="title">Operator Sum</span></div>
                           <div class="body">
                              <p>Sum adds up all the elements in a collection. The elements must be of type integer or real.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 78. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection  &#8594; sum()
 
Types for "sum"
   (collection_of_integers)  &#8594; integer 
   (collection_of_reals)  &#8594; real 
 
Definition of evaluation function for Fsum(V) 
Fsum(V) = V1+&#8230;+Vn           If V is a non-empty collection of n integer or 
                            real values &lt; V1 , &#8230; , Vn &gt; with (1&#8804; i &#8804; n) 
        = 0	            Else if V is an empty collection  
        = undefined 	    otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns 15, the sum of all the values in the collection:</p>
                              <table width="90%">
                                 <caption>Example 79. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   {1, 2, 3, 4, 5}  &#8594; sum()
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpFirstN"></a>5.10.18 </span><span class="title">Operator FirstN</span></div>
                           <div class="body">
                              <p>firstN returns a sequence with the first n elements from the current sequence (a collection with ordered elements). firstN
                                 returns the first n elements. 
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 80. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   sequence &#8594; firstN(numberOfElements)

Type for "firstN"
   (sequence x integer)  &#8594; sequence

Definition of evaluation function for FfirstN(V,N)
FfirstN(V,N)= sequence        If V is an non-empty sequence and N is an integer 
                              such that 1&#8804; N &#8804; size of V. The resulting sequence
                              is of the same type as V
            = undefined       otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the first 3 elements in a sequence:</p>
                              <table width="90%">
                                 <caption>Example 81. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {1,2,3,4,5}  &#8594; firstN(3)      returns {1,2,3}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpLastN"></a>5.10.19 </span><span class="title">Operator LastN</span></div>
                           <div class="body">
                              <p>Returns the last  n elements from the current sequence. The elements are returned as a sequence of n elements.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 82. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
    sequence  &#8594; lastN(numberOfElements)

Type for "lastN"
    (sequence x integer)  &#8594; sequence

Definition of evaluation function for FlastN(V,N)
FlastN(V,N)= sequence      If V is an non-empty sequence and N is an integer 
                           such that 1 &#8804; N &#8804; size of V.  The resulting sequence 
                           is of the same type as V 
           = undefined     otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the last 3 elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 83. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {1,2,3,4,5}  &#8594; lastN(3)      returns {3,4,5}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpElemAt"></a>5.10.20 </span><span class="title">Operator ElemAt</span></div>
                           <div class="body">
                              <p>Returns the element at the Nth position from the current sequence. </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 84. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
    sequence &#8594; elemAt(ElementPosition)


Type for "elemAt"
   (sequence x integer) &#8594; element

Definition of evaluation function for FelemAt(V,N)
FelemAt(V,N) = element     If V is an non-empty sequence and N is an integer 
                           such that 1 &#8804; N &#8804; size of V. The result is the  
                           element at the Nth position.
             = undefined   otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the element in the third position in the sequence. The positions go from 1 to size of sequence
                                 -1:
                              </p>
                              <table width="90%">
                                 <caption>Example 85. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {a, f, g, k, z} &#8594; elemAt(3)      returns g
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpReverse"></a>5.10.21 </span><span class="title">Operator Reverse</span></div>
                           <div class="body">
                              <p>Reverse returns a sequence in reversed order. E.g. the first element of the current sequence is returned as the last and so
                                 on. 
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 86. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   sequence &#8594; reverse()

Type for "reverse" 
   (sequence) &#8594; sequence 

Definition of evaluation function for Freverse(V) 
Freverse(V) = sequence       If V is a single instance or a sequence. 
                             The resulting sequence is of the same 
                             type as V. 
            = undefined      otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a sequence in a reversed order: </p>
                              <table width="90%">
                                 <caption>Example 87. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {a, f, g, k, z} &#8594; reverse()      returns {z, k, g, f, a}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpSortBy"></a>5.10.22 </span><span class="title">Operator SortBy</span></div>
                           <div class="body">
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 88. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection  &#8594; sortBy(orderByExpression)

Types for "sortBy"
    (collection x ListOfProperties)  &#8594;sequence

Definition of evaluation function for FsortBy(V,E)
FsortBy(V,E) = sequence          If V is a single instance or a collection  
                                 and E is a GELLO expression specifying the 
                                 properties by which the current collection 
                                 should be ordered by. The result is a 
                                 sequence. 
             = undefined 	 otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection of medications sorted in ascending order by effective time:</p>
                              <table width="90%">
                                 <caption>Example 89. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   Patient.Medication  &#8594; sortBy(effectiveTime.high())
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIntersec"></a>5.10.23 </span><span class="title">Operator Intersection</span></div>
                           <div class="body">
                              <p>The intersection operator returns a collection with the elements that appear in both the current collection and the parameter
                                 collection. This operation is valid for any combination set and bag, but is not defined for sequences. The return type is
                                 a set. Set does not allow duplicates.
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 90. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; intersection(parameterCollection)

Types for "intersection" 
   (set x set) &#8594; set 
   (bag x bag) &#8594; set 
   (set x bag) &#8594; set 
   (bag x set) &#8594; set 

Definition of evaluation function for Fintersection(V1,V2) 
Fintersection(V1,V2) = set         If V1 and V2 are either sets or bags with 
                                   elements &lt; V1,1, &#8230; , V1,n &gt;  and 
                                   &lt; V2,1, &#8230; ,V2,n &gt;  respectively. The 
                                   resulting set contains all the elements from 
                                   V1 that also are elements of V2  (V1,i = V2,j). 
                                   If there are not common elements in V1 and V2
                                   the intersection returns an empty set. 
                     = undefined   otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <table width="90%">
                                 <caption>Example 91. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   
   TDrug: a variable holding a collection of drugs, each of which has a 
   "compellingIndication" property.  aPatient is a variable referencing a 
   particular patient&#8217;s medical record:

   Drug &#8594; exists(aDrug: not(aDrug.compellingIndication &#8594; 
                            intersection(aPerson.problemList) &#8594; isEmpty))
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpUnion"></a>5.10.24 </span><span class="title">Operator Union</span></div>
                           <div class="body">
                              <p>The union operation combines two collections into a new one. The union operation can combine a set and a bag, but a sequence
                                 only can be combined with another sequence.
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 92. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection union(parameterCollection)

Types for "union"
   (set x bag) &#8594; bag 
   (bag x set)  &#8594; bag 
   (set x set) &#8594; bag 
   (bag x bag) &#8594; bag 
   (sequence x sequence) &#8594; sequence 

 Definition of evaluation function for Funion(V1,V2) 
 Funion(V1,V2) = set             If V1 and V2 are both sets. The resulting set contains 
                                 the values   that are either in V1 or in V2. Duplicate 
                                 elements are not added. 
               = bag             If V1 and V2 are either sets or bags. The resulting bag 
                                 contains the values &lt;  V1,1, &#8230; , V1,n &gt; from V1 
                                 and &lt; V2,1, &#8230; , V2,n &gt;  from V2. 
               = sequence        Else if  V1 and V2 are both sequences. The resulting 
                                 sequence contains the values &lt;  V1,1, &#8230; , V1,n , 
                                 V2,1, &#8230; , V2,n &gt; such that &lt;  V1,1, &#8230; , V1,n &gt; are
                                 from V1 and &lt; V2,1, &#8230; , V2,n &gt;  are from V2
               = undefined	 otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection times when a patient has taken any medication and has had problems:</p>
                              <table width="90%">
                                 <caption>Example 93. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   Patient.problemList &#8594; exist(problemList : medication.AllInstances &#8594; 
                              exist( medication.effectiveTime &#8594; union(effectiveTime))
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpIncluding"></a>5.10.25 </span><span class="title">Operator Including</span></div>
                           <div class="body">
                              <p>The operator including returns a collection containing all the elements of the current collection plus an element (which is
                                 added at the end if the collection is a sequence). 
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 94. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594;  including(element)

Types for "including" 
   (set x element) &#8594; set 
   (bag x element) &#8594; bag 
   (sequence x element) &#8594; set
   (sequence &#8594; element) &#8594; bag 
 
Definition of evaluation function for Fincluding(V,E)
Fincluding(V,E)= set              If V is a set and E is an element that does not exist in V. 
                                  E must be of the same type as the elements in V. The 
                                  returning result is a set V&#8594;union(Set{E}).
Fincluding(V,E)= bag              If V is a bag, the returning type of the collection is a 
                                  bag with E added to V.
Fincluding(V,E)= sequence         If V is a sequence and E is an element that does 
                                  not exist in V.  The resulting sequence has E added to the 
                                  end of V.  E must be of the same type as the elements in V.
Fincluding(V,E)= bag              If V is a sequence and E is an element that does 
                                  exist in V.  E must be of  the same type as the elements in V.
               = undefined        otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a set with the appended element:</p>
                              <table width="90%">
                                 <caption>Example 95. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   Set{7, 2, 8, 4}&#8594; including(5)     returns  Set{7, 2, 8, 4, 5}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpExcluding"></a>5.10.26 </span><span class="title">Operator Excluding</span></div>
                           <div class="body">
                              <p>The operator excluding returns a collection containing all the elements of the current collection minus all the occurrences
                                 of element. 
                              </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 96. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; excluding(element)

Types for "excluding" 
   (set x element) &#8594; set   
   (bag x (element) &#8594; bag 
   (sequence x element) &#8594; sequence 
 
Definition of evaluation function for Fexcluding(V,E) 
&gt;Fexcluding(V,E)= collection       If V is either a set, bag or sequence and E 
                                   is an element  in V.   
                = undefined        otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a bag with the deleted element:</p>
                              <table width="90%">
                                 <caption>Example 97. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   Bag{7, 2, 5, 8, 4, 5} &#8594; excluding(5)     returns Bag{7, 2, 8, 4}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpJoin"></a>5.10.27 </span><span class="title">Operator Join</span></div>
                           <div class="body">
                              <p>The join operator brings together data from two or more collections. The result is a collection of tuples. Each tuple contains
                                 data from each element in the specified collections where the values of the specified conditions match.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 98. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   currentCollection  &#8594; join(namesOfCollections; namesOfProperties; booleanExpression; 
         orderByExpression)

Where:
&#8226; namesOfCollections is a list of strings separated by commas, where each  
  string represents the name of a collection from where data is retrieved. 
&#8226; The name of the current collection currentCollection must appear in the list. 

Notation for namesOfCollections:
&#8226; Collection1, collection2,&#8230;collectionn;                
   E.g.   patient, labTest, &#8230;, treatment
&#8226; Alias1 in collection1, alias2 in collection2, &#8230;, aliasn in collectionn;               
   E.g.   p in patient, lt in labTest, &#8230;, t in treatment
 
&#8226; namesOfProperties is a list of strings separated by commas, where each 
  string is the full description of the properties from the objects in the
  collections we want to get in the result.  

The notation is: object.property.  E.g. [patient.ID, labTest.ID, labTest.result, 
labTest.date, treatment.ID, treatment.description].  
Or using aliases: p.ID, lt.ID, etc. 

 &#8226; booleanExpression is a valid GELLO Boolean expression containing the 
   conditions the elements from the collections defined in listOfCollections 
   must satisfy in order to be included in the result. For each pair of 
   collections there must be at least one condition related to these 
   collections in the booleanExpression. In general, the number of conditions 
   must be at least equal to the number of collections in listOfCollections-1.

&#8226; orderByExpression is a valid GELLO expression specifying the properties 
  by which the result should be ordered.   E.g. patient.ID, treatmentID or
  using aliases  p.ID, t.ID, will sort the result by patientID and 
  treatment ID. 

Types for "join"
   (collection x  parameterList x parameterList x booleanExpression x 
         OrderExpression) &#8594; bag_of_tuples  
                     *: for any type of collection if OrderExpression is 
                         not specified. 
                         
   (collection x parameterList x parameterList x booleanExpression x 
         OrderExpression) &#8594; sequence_of_tuples 
                    +: for any type of collection if OrderExpression is 
                        specified. 

 Definition of evaluation function for Fjoin(V,S1,S2,E1,E2) 
 Fjoin(V,S1,S2,E1,E2) = bag of tuples  	       If V is collection, S1 is a parameter list of 
                                               strings with the names of the collections from 
                                               where  data will be retrieved, S2 is a parameter
                                               list of strings with the full names of the properties 
                                               to be included in the result, E1 is a boolean
                                               expression containing the conditions C &lt;C1 booleanOP 
                                               C2 &#8230; booleanOP Cn &gt;    the returning elements must 
                                               satisfy. The number of conditions Ci in
                                                E1 &#8805; [S1(size()-1].  E2 is an optional 
                                               parameter that specifies the criteria for ordering the
                                               resulting elements. If  E2 is not specified, the 
                                               result is a bag.
 Fjoin(V,S1,S2,E1,E2) = sequence of tuples     If V is collection, S1 is a parameter list of 
                                               strings with the names of the collections from 
                                               where data will be retrieved, S2 is a parameter
                                               list of strings with the full names of the properties 
                                               to be included in the result, E1 is a boolean expression 
                                               containing the conditions Ci &lt; C1 booleanOP 
                                               C2 &#8230; booleanOP Cn  &gt; the returning elements 
                                               must satisfy. The number of conditions Ci in 
                                               E1 &#8805; [S1(size()-1].  E2 is an optional parameter 
                                               that specifies the criteria for ordering the
                                               resulting elements. If ordering is required, then 
                                               a GELLO expression specifying the  properties 
                                               by which the result should be ordered by
                                               must be defined.  The resulting collection is
                                               a sequence.
                      = undefined              otherwise
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection of tuples containing Medication code, effective time and value, and Lab Results
                                 code, effective time and value, for all the Lab Results performed (effective time) while a patient was taking any Medication
                                 effective time):
                              </p>
                              <table width="90%">
                                 <caption>Example 99. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   LabResults&#8594; join(Medications; Medications.code, Medications.effectiveTime,
                     Medications.value, LabResults.code,  LabResults.effectiveTime, 
                     LabResults.value; Medications.effectiveTime.contains(LabResults.effectiveTime)
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpAverage"></a>5.10.28 </span><span class="title">Operator Average</span></div>
                           <div class="body">
                              <p>Average returns the average (arithmetic mean) of the numerical elements in a collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 100. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; average()

Type for "average"
   (collection)  &#8594; real

Definition of evaluation function for Faverage(V)
Faverage(V) = real       If V is a collection  and all the elements in the collection 
                         are either real or integer numbers
            = undefined  otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the average value of the elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 101. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
    recorded_temperatures is a collection containing the recorded temperatures 
    of a patient: {97, 98, 98.5, 99, 99, 97, 97}. 

                     So, recorded_temperatures &#8594; average()          returns: 97.92 F
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpStdev"></a>5.10.29 </span><span class="title">Operator Stdev</span></div>
                           <div class="body">
                              <p>Stdev returns the standard deviation of the numerical elements in a collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 102. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; stdev()

Type for "stdev"
   (collection)  &#8594; real

Definition of evaluation function for Fstdev(V)
Fstdev(V) = real        If V is a collection  and all the elements in the collection are 
                        either real or integer numbers
          = undefined 	otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the standard deviation of the elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 103. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
    recorded_temperatures is a collection containing the recorded temperatures 
    of a patient: {97, 98, 98.5, 99, 99, 97, 97}. 

                     So, recorded_temperatures &#8594; stdev()          returns: 0.9322
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpVariance"></a>5.10.30 </span><span class="title">Operator Variance</span></div>
                           <div class="body">
                              <p>Variance returns the variance of the numerical elements in a collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 104. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; variance()

Type for "variance"
   (collection)  &#8594; real

Definition of evaluation function for Fvariance(V)
Fvariance(V) = real         If V is a collection  and all the elements in the collection are 
                            either real or integer numbers
             = undefined    otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the variance of the elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 105. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
    recorded_temperatures is a collection containing the recorded temperatures
    of a patient: {97, 98, 98.5, 99, 99, 97, 97}. 
    
                     So, recorded_temperatures &#8594; variance()          returns: 0.8690
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpMedian"></a>5.10.31 </span><span class="title">Operator Median</span></div>
                           <div class="body">
                              <p>Median returns the median of the numerical elements in a collection. The median is the number in the middle of a set of numbers;
                                 that is, half the numbers have values that are greater than the median, and half have values that are less. If the number
                                 of elements is even, then the median is the average value of the two numbers in the middle.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 106. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; median()

Type for "median"
   (collection)  &#8594; real

Definition of evaluation function for Fmedian(V)
Fmedian(V) = integer      If V is a collection and all the elements in the collection are 
                          integer numbers
            = real        Else if V is a collection and all the elements in the collection are 
                          either real or integer numbers
            = undefined   otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the median of the elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 107. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
    recorded_temperatures is a collection containing the recorded temperatures
    of a patient: {97, 98, 98.5, 99, 99, 97, 97}. 
    
                     So,   recorded_temperatures &#8594; median()          returns: 98
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpMode"></a>5.10.32 </span><span class="title">Operator Mode</span></div>
                           <div class="body">
                              <p>Mode returns the most frequently occurring value in a collection.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 108. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; mode()

Type for "mode"
   (collection)  &#8594; real

Definition of evaluation function for Fmode(V)
Fmode(V) = integer      If V is a collection and all the elements in the collection are 
                        integer numbers
         = real         Else if V is a collection and all the elements in the collection are 
                        either real or integer numbers
         = undefined 	otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns the median of the elements in a collection:</p>
                              <table width="90%">
                                 <caption>Example 109. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
    recorded_temperatures is a collection containing the recorded temperatures
    of a patient: {97, 98, 98.5, 99, 99, 97, 97}. 
    
                     So,   recorded_temperatures &#8594; mode()          returns: 97
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpLike"></a>5.10.33 </span><span class="title">Operator Like</span></div>
                           <div class="body">
                              <p>Like operator searches a collection of strings and returns those  that match a given pattern.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 110. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; like(String)

Type for "like"
   (collection x string) &#8594; collection 
 
Definition of evaluation function for Flike(V1,V2) 
Flike(V1,V2) = collection     If V1 is a collection  of strings and V2   
                              is string pattern.The result is a collection of all 
                              strings that matched the given pattern. If there 
                              are no matches, the returning collection is empty.
              = undefined     otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection with problems that are like "ast" (asthma, astigmatism...):</p>
                              <table width="90%">
                                 <caption>Example 111. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList &#8594;  collect(code) &#8594; like("ast")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpNotLike"></a>5.10.34 </span><span class="title">Operator NotLike</span></div>
                           <div class="body">
                              <p>NotLike operator searches a collection of strings and returns those that do not match a given pattern.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 112. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; notlike(String)

Type for "notlike"
   (collection x string) &#8594; collection 
 
Definition of evaluation function for Fnotlike(V1,V2) 
Fnotlike(V1,V2) = collection   If V1 is a collection  of strings and V2  
                               is string pattern. The result is a collection of all  
                               strings that did not match the given pattern.  
                               If there are no matches, the returning collection is empty.
                = undefined    otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection with problems that are not like "ast" (e.g. diabetes, COPD):</p>
                              <table width="90%">
                                 <caption>Example 113. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   patient.problemList &#8594;  collect(code) &#8594; notlike("ast")
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpBetween"></a>5.10.35 </span><span class="title">Operator Between</span></div>
                           <div class="body">
                              <p>Between operator searches a collection of strings and returns those strings that are between a given range.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 114. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; between(String1, String2)

Type for "between"
   (collection x string x string) &#8594; collection 
 
Definition of evaluation function for Fbetween(V1,V2,V3) 
Fbetween(V1,V2,V3) = collection   If V1 is a collection of strings 
                                  and V2 and V3 are both stringsdefining a 
                                  range.  The result is a collection of all  strings 
                                  that are between the given range. If there are 
                                  no matches, the returning collection is empty.
                   = undefined    otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a collection with problems that are between diabetes and reflux:</p>
                              <table width="90%">
                                 <caption>Example 115. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {asthma, copd, diabetes, IRS, meningitis, reflux, UTI} &#8594; between(diabetes, reflux) 
   returns: {diabetes, IRS, meningitis, reflux}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="OpDistinct"></a>5.10.36 </span><span class="title">Operator Distinct</span></div>
                           <div class="body">
                              <p>Distinct operator returns a collection (set) with no duplicate elements. Basically is a casting operation, that converts a
                                 bag or sequence into a set, hence eliminating duplicates.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 116. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   collection &#8594; distinct()

Type for "distinct"
   (collection) &#8594; set 
 
Definition of evaluation function for Fdistinct(V1) 
Fdistinct(V1) = set         If V1 is a collection  the result is a set 
              = undefined   otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The following example returns a set with problems::</p>
                              <table width="90%">
                                 <caption>Example 117. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   {asthma, copd, diabetes, copd, UTI, IRS, reflux, UTI} &#8594; distinct() 
   returns: {asthma, copd, diabetes, UTI, IRS, reflux}
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="TupleOps"></a>5.11 </span><span class="title">Tuple Operators</span></div>
                     <div class="body">
                        <p>A GELLO tuple is an aggregated data type formed by one or more elements with different types. As described in §&#8206;5.1.4, each
                           tuple part has a name and a type. GELLO provides the following operations to handle and access tuple elements. Since all elements
                           in a tuple have unique values, we use the &#8216;dot&#8217; notation to access them in the same manner as we access attributes in a class
                           (§&#8206;5.3.1), e.g. tupleName.elemName.
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TupleSize"></a>5.11.1 </span><span class="title">Operator Size</span></div>
                           <div class="body">
                              <p>The operator size returns the number of elements in a tuple. </p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 118. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   Tuple.size()

Types for "size" 
   (tuple) &#8594; integer 

Definition of evaluation function for Fsize(T) 
Fsize(T)= integer      If T is a tuple   
        = undefined    otherwise 
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>For the Tuple personalData{name: String = &#8216;John Smith&#8217;, nickname: String = &#8216;Johnny&#8217;, age: Integer = 10} the following example
                                 returns 3:
                              </p>
                              <table width="90%">
                                 <caption>Example 119. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   personalData.size()   returns 3 
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TupleGetValue"></a>5.11.2 </span><span class="title">Operator getValue</span></div>
                           <div class="body">
                              <p>The operator getValue returns the value of an element with name = elemName in a tuple.</p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 120. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
						
   Tuple.getValue(elemName)

Types for "getValue" 
   (tuple(string) &#8594; PredefinedDataTypeValue 
   (tuple(string) &#8594; ModelDataTypeObject 
 
Definition of evaluation function for FgetValue(T,S)
FgetValue(T,S) = PredefinedDataTypeValue     If T is a tuple  and S is a string with the name of  
                                             an element in T, and the type of the returning  
                                             value is one of the predefined data types: 
                                             integer, real, boolean, string or one of the 
                                             collection types. 
               = ModelDataTypeObject	     Else if T is a tuple  and S is a string with the name 
                                             of an element in T, and the type of the returning 
                                             value is one of the model data types. 
               = undefined                   otherwise
						</pre></pre></td>
                                 </tr>
                              </table>
                              <p>For the Tuple personalData{name: String = &#8216;John Smith&#8217;, nickname: String = &#8216;Johnny&#8217;, age: Integer = 10} the following example
                                 returns Johnny:
                              </p>
                              <p></p>
                              <table width="90%">
                                 <caption>Example 121. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   personalData.getValue(nickname)     returns &#8216;Johnny&#8217; 
   
   this is equivalent to:   personalData.nickname 
					   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TupleGetElemName"></a>5.11.3 </span><span class="title">Operator getElemName</span></div>
                           <div class="body">
                              <p>The operator getElemName returns a string with the name of the element i in the ith position in the tuple.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 122. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   Tuple.getElemName(position) 
 
Type for "getElemName"
   (tuple x integer) &#8594; string 

Definition of evaluation function for FgetElemName(T,I) 
 FgetElemName(T,I) = string       If T is a tuple  and I is an integer (1 &#8804; T.size()). 
                   = undefined    otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>For the Tuple personalData{name: String = &#8216;John Smith&#8217;, nickname: String = &#8216;Johnny&#8217;, age: Integer = 10} the following example
                                 returns 3:
                              </p>
                              <table width="90%">
                                 <caption>Example 123. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   personalData.getElemName(2)     returns &#8216;nickname&#8217;
						   </pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TupleGetElemType"></a>5.11.4 </span><span class="title">Operator getElemType</span></div>
                           <div class="body">
                              <p>The operator getElemType returns a string which represents the basic or model data type associated to an element in a tuple.
                                 GetElemType can be used by giving the position or the name of an element in the tuple.
                              </p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 124. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
   Tuple.getElemType(position)
   Tuple.getElemType(elemName) 
 
Types for "getElemType" 
   (tuple x integer) &#8594; string 
   (tuple x string) &#8594; string 
 
Definition of evaluation function for FgetElemType(T,I) 
FgetElemType(T,I) = PredefinedDataType     If T is a tuple  and I is an integer (1 &#8804; T.size()). 
                                           The returning value is a string referring to a
                                           predefined data type: integer, real, Boolean, 
                                           string or one of the collection types. 
                  = ModelDataType          Else if T is a tuple  and I is an integer (1 &#8804; T.size()). 
                                           The returning value is a string referring to a model 
                                           data type. 
                  = undefined              otherwise 
 
 Definition of evaluation function for FgetElemType(T,S)
 FgetElemType(T,S)= PredefinedDataType     If T is a tuple  and S is a string referring to the 
                                           name of an element in the tuple. The returning value 
                                           is a string referring to a basic data type: integer, 
                                           real, Boolean, string, or one of the collection types. 
                  = ModelDataType          Else if T is a tuple and S is a string referring to the 
                                           name of an element in the tuple.  The returning value
                                           is a string referring to a model data type. 
                  = undefined              otherwise 
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>For the Tuple personalData{name: String = &#8216;John Smith&#8217;, nickname: String = &#8216;Johnny&#8217;, age: Integer = 10} the following example
                                 returns 3:
                              </p>
                              <table width="90%">
                                 <caption>Example 125. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>	
   personalData.getElemType(2)     returns String

   this is equivalent to:    personalData.getElemType(&#8216;nickname&#8217;) 
						</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="section-Date/Time-Operators"></a>5.12 </span><span class="title">Date/Time Operators</span></div>
                     <div class="body">
                        <!--divN/text()-->id="DateOps"&gt;
                        				
                        <p>The following operators handle date and time objects.</p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ToDate"></a>5.12.1 </span><span class="title">Operator ToDate</span></div>
                           <div class="body">
                              <p>The operator ToDate takes a string and returns a PointInTime object.</p>
                              <p></p>
                              <p>The notation is:</p>
                              <table width="90%">
                                 <caption>Example 126. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
Type for "todate" 
&#8226; (string) &#8594;  PointInTime    (a RIM object)

Definition of evaluation function for Ftodate(V)
Ftodate(V)= PointInTime    If V is a valid string. The result is a PoinInTime object  
          = undefined      otherwise
						 </pre></pre></td>
                                 </tr>
                              </table>
                              <p>The notation for using this operator is as follows. It requires the Factory method because the returning object is an instance
                                 of a RIM Class
                              </p>
                              <table width="90%">
                                 <caption>Example 127. </caption>
                                 <tr>
                                    <td class="example"><pre><pre>
					
	The following expression creates a PointInTime object 
	with the argument string:
	
	              Let aDate: PointInTime = Factory.PointInTime(String)
					</pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="AddMonthsDateNextDay"></a>5.12.2 </span><span class="title">Operator AddMonths, AddDate and NextDay</span></div>
                           <div class="body">
                              <p>These operations are supported by the RIM PoinInTime Class using the operator plus.</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="LastDay"></a>5.12.3 </span><span class="title">Operator LastDay</span></div>
                           <div class="body">
                              <p>This operation is fully supported by the RIM (time) Interval Class using the operator high. </p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Precedence"></a>5.13 </span><span class="title">Precedence Rules</span></div>
                     <div class="body">
                        <p>The precedence order for operations in GELLO, starting with the highest precedence, is as follows:</p>
                        <ul style="margin-left:20px;">
                           <li>"dot" (".") and "arrow" ("&#8594; ") operations</li>
                           <li>unary "not" and unary "minus"</li>
                           <li>"*", "/", "div" and "mod"</li>
                           <li>"+" and binary "-"</li>
                           <li>"if-then-else-endif"</li>
                           <li>&#8216;&lt;&#8217;, &#8216;&gt;&#8217;, &#8216;&lt;=&#8217;, &#8216;&gt;=&#8217;</li>
                           <li>&#8216;=&#8217;, &#8216;&lt;&gt;&#8217;</li>
                           <li>&#8216;and&#8217;, &#8216;or&#8217; and &#8216;xor&#8217;</li>
                           <li>&#8216;implies&#8217;</li>
                           <li>Parentheses "(" and ")" can be used to change precedence.</li>
                        </ul>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="IfExp"></a>5.14 </span><span class="title">If Expression</span></div>
                     <div class="body">
                        <p>An IfExpression evaluates a condition and depending on the resulting truth value, the result is one of two possible expressions.
                           Both expressions are mandatory. The IfExpression is not intended for control flow, but as a conditional for the returning
                           value of an expression. The syntax of an IfExpression is as follows:
                        </p>
                        <table width="90%">
                           <caption>Example 128. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   if condition then 
      expression1 
   else 
      expression2
   endif 
					</pre></pre></td>
                           </tr>
                        </table>
                        <table width="90%">
                           <caption>Example 129. </caption>
                           <tr>
                              <td class="example"><pre><pre>
Definition of the evaluation function Fif(V1, V2, V3), where V1 is the condition, 
a GELLO expression which its evaluation returns a truth value; and V2 and  V3 are 
expression1 and expression2 respectively, both valid GELLO expressions.

Fif(V1,V2,V3) =  V2            If V1 = true 
              =  V3            Else if V1 = false
              =  undefined     otherwise 
					 </pre></pre></td>
                           </tr>
                        </table>
                        <table width="90%">
                           <caption>Example 130. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   let renal_failure :Boolean = 
      if lastCreatinine.oclIsDefined() and
               lastCreatine.value.greaterThan(renal_failure_threshold)  then 
         true
      else
         false
      Endif
			   </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="GELLOSyntax"></a>6 </span><span class="title">GELLO Syntax</span></div>
               <div class="body">
                  <p>This section describes the grammar used in this specification to define the lexical and syntactic structure of GELLO expressions.
                     A context-free grammar consists of a number of productions. Each production is formed by two parts: the left-hand side consisting
                     of a nonterminal symbol and a right-hand side formed by a sequence of one or more nonterminal and terminal symbols. 
                  </p>
                  <p>Starting from a sentence consisting of a single nonterminal, and a set of production rules, the complete grammar is derived
                     by means of a set of possible sequences of terminal symbols that can result from repeatedly replacing any nonterminal symbol
                     in a sequence with its associated right-hand side sequence of a production rule. 
                  </p>
                  <p>Section §&#8206;6.2 describes the grammar used in this specification to define the lexical and syntactic structure of GELLO expressions.
                     For an expression to be syntactically correct it must conform to:
                  </p>
                  <p>The BNF and lexical grammar defined in this section of the document (§&#8206;6.3). </p>
                  <p>The context sensitive constraints: </p>
                  <p>Every expression must be type-correct. It must comply with the type definitions in §&#8206;5.1.</p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="InfTypes"></a>6.1 </span><span class="title">Inferring Type Rules for Expressions</span></div>
                     <div class="body">
                        <p>Let E be a valid GELLO expression. The type of E is either a basic (Integer, Real, Boolean or String), a model type or one
                           of the collection or tuple types.  The type of E can be inferred by using the rules defined in GELLO lexical grammar §&#8206;6.2
                           and GELLO BNF §&#8206;6.3.
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="LexGram"></a>6.2 </span><span class="title">GELLO Lexical Grammar</span></div>
                     <div class="body">
                        <p>GELLO BNF syntax is defined in terms of the following lexical tokens. GELLO grammar is based on the grammar for <a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">OCL expressions:</a></p>
                        <p></p>
                        <p>A reserved word is any string that appears in double quotes in the BNF.</p>
                        <p>An atom consists of any sequence of alphanumeric characters, which begins with a letter and can contain one or more underscores.</p>
                        <p>A number could be either an integer or a real.</p>
                        <p>An integer is represented by one or more digits</p>
                        <p>A real is represented by  a sequence of one or more digits followed by "." followed by zero or more digits, optionally followed
                           by  "e" or "E"  a sign "+" or  "-"  one or more digits and "d" or "D".
                        </p>
                        <p>A single quoted string is a pair of single quote characters enclosing a sequence of zero or more characters other than comments,
                           tabs, newlines and carriage returns.
                        </p>
                        <p>A comment is any sequence of characters other than newlines, or carriage returns following two successive dashes -- , e.g.</p>
                        <p>-- this is a comment.</p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="BNF"></a>6.3 </span><span class="title">GELLO BNF Syntax</span></div>
                     <div class="body">
                        <p>The Backus-Naur Form (BNF) syntax of GELLO assumes that text defining a GELLO expression has been converted into lexical tokens
                           by the lexical analyzer defined in the previous section.  
                        </p>
                        <p></p>
                        <p>The following notational conventions are used throughout GELLO BNF syntax:</p>
                        <ul style="margin-left:20px;">
                           <li>The root symbol of the syntax is &lt;GELLOExpression&gt;</li>
                           <li>Non-terminal symbols are denoted with underlined text strings, e.g. <u> expression&gt; </u></li>
                           <li>Left-hand side terms in production rules are nonterminal</li>
                           <li>Tokens are represented with text strings enclosed in angle brackets, e.g. &lt;atom&gt;. </li>
                           <li>Reserved words are represented by text strings enclosed in double quotes.</li>
                           <li>The grammar below uses the following conventions:</li>
                           <ol>
                              <li>(x)? denotes zero or one occurrences of x.</li>
                              <li>(x)* denotes zero or more occurrences of x.</li>
                              <li>(x)+ denotes one or more occurrences of x.</li>
                              <li>x | y means one of either x or y.</li>
                           </ol>
                        </ul>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="RootSymbol"></a>6.3.1 </span><span class="title"> Root Symbol</span></div>
                           <div class="body">
                              <table width="90%">
                                 <tr>
                                    <td class=""><pre><pre><p>GELLOExpression::=      SpExpression   
                                |   Expression
                                |   LetStatement
                                |   IfStatement
                                |   ContextNavigationStatement</p></pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Literals"></a>6.3.2 </span><span class="title">Literals</span></div>
                           <div class="body">
                              <table width="90%">
                                 <tr>
                                    <td class=""><pre><pre><p>Literal::=          &lt;STRING_LITERAL&gt;
                                |   &lt;INTEGER_LITERAL&gt; 
                                |   &lt;REAL_LITERAL&gt; 
                                |   &lt;TRUE&gt; 
                                |   &lt;FALSE&gt; 
                                |   &lt;UNKNOWN&gt; 
                                |   &lt;COLLECTION_LITERAL&gt; 
                                |   &lt;TUPLE_LITERAL&gt; 
                                |   "#" &lt;ID&gt;</p></pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="DataTypes"></a>6.3.3 </span><span class="title">Data Types</span></div>
                           <div class="body">
                              <table width="90%">
                                 <tr>
                                    <td class=""><pre><pre><p>DataTypes::=      GELLOTypes
                                |   ModelTypes</p><p></p><p>GELLOTypes::=      BasicType 
                                |   CollectionType 
                                |   TupleType 
                                |   EnumerationType 
                                |   Literal </p><p></p><p>BasicType::=         &lt;INTEGER&gt; 
                                |   &lt;STRING&gt;
                                |   &lt;REAL&gt;
                                |   &lt;BOOLEAN&gt;</p><p></p><p>ModelTypes::=   ClassName</p><p></p><p>CollectionType::=   &lt;SET&gt; 
                                |   &lt;BAG&gt;
                                |   &lt;SEQUENCE&gt;</p><p></p><p>TupleType::=   &lt;TUPLE&gt;</p><p></p><p>EnumerationType::=   &lt;ENUM&gt;</p><p></p><p>ClassName::=   Name</p></pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Names"></a>6.3.4 </span><span class="title">Names</span></div>
                           <div class="body">
                              <p>Name::=		&lt;ID&gt; ("." &lt;ID&gt;)*</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Expressions"></a>6.3.5 </span><span class="title">Expressions</span></div>
                           <div class="body">
                              <table width="90%">
                                 <tr>
                                    <td class=""><pre><pre><p>Expression::=     ConditionalExpression
                                |   ReferenceToInstance
                                |   FunctorExpression</p><p></p><p>ConditionalExpression::=     OrExpression</p><p></p><p>OrExpression::=     ConditionalAndExpression (&lt;OR&gt; ConditionalAndExpression  | 
                                    &lt;XOR&gt; ConditionalAndExpression)*</p><p></p><p>ConditionalAndExpression::=     ComparisonExpression (&lt;AND&gt; ComparisonExpression)*</p><p></p><p>ComparisonExpression::=		AddExpression (&lt;EQUAL&gt; AddExpression | 
                                    &lt;NEQ&gt; AddExpression | &lt;LT&gt; AddExpression  | 
                                    &lt;LEQ&gt; AddExpression | &lt;GT&gt;  AddExpression  | 
                                    &lt;GEQ&gt; AddExpression)*</p><p></p><p>AddExpression::=     MultiplyExpression (&lt;MINUS&gt; MultiplyExpression | 
                                    &lt;PLUS&gt; MultiplyExpression)*</p><p></p><p>MultiplyExpression::=     UnaryExpression (&lt;TIMES&gt; UnaryExpression | 
                                    &lt;DIVIDE&gt; UnaryExpression | &lt;MAX&gt;  UnaryExpression | 
                                    &lt;MIN&gt; UnaryExpression | &lt;INTDIV&gt; UnaryExpression | 
                                    &lt;MOD&gt; UnaryExpression )*</p><p></p><p>UnaryExpression::=     UnaryNumber 
                                |   UnaryModDivNum 
                                |   UnaryMinus 
                                |   MinusModDivNum 
                                |   &lt;NOT&gt; UnaryExpression 
                                |   PrimaryExpression</p><p></p><p>UnaryNumber::=     Number</p><p>UnaryMinus::=     - Number</p><p></p><p>UnaryModDivNum::=     &lt;INTEGER_LITERAL&gt;</p><p></p><p>MinusModDivNum::=	- &lt;INTEGER_LITERAL&gt;</p><p></p><p>PrimaryExpression::=     Literal
                                |   Name
                                |   "(" Expression ")"</p><p></p><p>FunctorExpression::=     FunctorName "(" ExpressionList ")"</p><p></p><p>FunctorName::=     Name</p><p></p><p>ExpressionList::=     Expression? (&lt;COMMA&gt; ExpressionList)*</p></pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Statements"></a>6.3.6 </span><span class="title">Statements</span></div>
                           <div class="body">
                              <table width="90%">
                                 <tr>
                                    <td class=""><pre><pre><p>Statement::=     Expression 
                                |   LetStatement 
                                |   IfStatement 
                                |   SpExpression</p><p></p><p>LetStatement::=     &lt;LET&gt; &lt;ID&gt; ":" (   (BasicType | GELLOType) &lt;EQUAL&gt; 
                                    ( Expression | SpExpression )   ) 
                                |   (ClassName &lt;EQUAL&gt; ReferenceToClass  )</p><p></p><p>IfStatement::=     &lt;IF&gt; Expression &lt;THEN&gt; Statement &lt;ELSE&gt; Statement &lt;ENDIF&gt;</p><p></p><p>ContextNavigationStatement::=     ContextStatement 
                                |   PackageStatement 
                                |   PathnameStatement</p><p></p><p>ContextStatement::=     &lt;CONTEXT&gt;  ( ContextBody  | DefinitionBody)</p><p></p><p>ContextBody::=     ( "[" Alias "]")? ClassName 
                                (  (&lt;SELF&gt;"." Expression   )  |   Expression   )</p><p></p><p>DefinitionBody::=     &lt;DEF&gt; ":" TypeName ":" DataTypes &lt;EQ&gt;  
                                Expression</p><p></p><p>Alias::=     &lt;ID&gt;</p><p></p><p>PackageStatement::=     &lt;PACKAGE&gt; PackageName  
                                       ContextStatement 
                                  &lt;ENDPACKAGE&gt;</p><p></p><p>PackageName::=     Name</p><p></p><p>TypeName::=     Name</p><p></p><p>PathnameStatement::=     PackageName "::" ( PackageName "::")* TypeName </p><p></p><p>SpExpression::=     CollectionExp 
                                |   StringOperation 
                                |   TupleExp</p><p></p><p>CollectionExp::=     CollectionName "&#8594; " ExpBody</p><p></p><p>CollectionName::=     &lt;ID&gt;</p><p></p><p>ExpBody::=     NonParamExp   
                                |   SelectionExp   
                                |   QuantifierExp 
                                |   SingleObjExp   
                                |   ListObjExp   
                                |   GetExp 
                                |   SetExp 
                                |   IterateExp 
                                |   JoinExp</p><p></p><p>SelectionExp::=     &lt;SELECT&gt; "("CExp")"  
                                |   &lt;REJECT&gt; "("CExp")"   
                                |   &lt;COLLECT&gt; "("CExp")"  </p><p></p><p>QuantifierExp::=     &lt;FORALL&gt; "("CExp")"   
                                |   &lt;EXISTS&gt;  "("CExp")"</p><p></p><p>CExp::=     ConditionalExpression 
                                |   ConditionalExpressionWithIterator 
                                |   ConditionalExpressionWithIteratorType</p><p></p><p>ConditionalExpressionWithIterator::=     Name "|" ConditionalExpression</p><p></p><p>ConditionalExpressionWithIteratorType::=      Name ":" DataTypes "|" ConditionalExpression</p><p></p><p>NonParamExp::=     &lt;SIZE&gt; "(" ")"   
                                |   &lt;ISEMPTY&gt; "(" ")"  
                                |   &lt;NOTEMPTY&gt; "(" ")" 
                                |   |  &lt;SUM&gt; "(" ")" 
                                |   &lt;REVERSE&gt; "(" ")" 
                                |   | &lt;MIN&gt; "(" ")" 
                                |   | &lt;MAX&gt; "(" ")" 
                                |   | &lt;FLATTEN&gt; "(" ")"</p><p></p><p>SingleObjExp::=	     &lt;COUNT&gt; "(" Object ")" 
                                |   &lt;INCLUDES&gt; "(" Object ")" 
                                |   &lt;INCLUDING&gt; "(" Object ")" 
                                |   &lt;EXCLUDING&gt; "(" Object ")"</p><p></p><p>ListObjExp::=     &lt;INCLUDESALL&gt; "(" ObjectList ")" 
                                |   &lt;SORTBY&gt; "(" PropertyList ")"</p><p></p><p>GetExp::=     &lt;FIRSTN&gt; "(" &lt;INTEGER_LITERAL&gt; ")" 
                                |   &lt;LASTN&gt; "(" &lt;INTEGER_LITERAL&gt; ")"</p><p></p><p>SetExp::=     &lt;INTERSECTION&gt; "(" CollectionName ")" 
                                |   &lt;UNION&gt; "(" CollectionName ")"</p><p></p><p>IterateExp::=     &lt;ITERATE&gt; "(" IterateParameterList ")"</p><p></p><p>JoinExp::=    &lt;JOIN&gt;  "(" ParameterList ";" ParameterList ";" 
                                    ConditionalExpression ";" ParameterList ")"</p><p></p><p>StringOperation::=     Expression "." ( StrSize 
                                |   StrConcat 
                                |   StrToUpper 
                                |   StrToLower 
                                |   Substring )</p><p></p><p>StrSize::=     &lt;SIZE&gt; "(" ")"</p><p></p><p>StrConcat::=     &lt;CONCAT&gt; "(" Expression ")"</p><p></p><p>StrToUpper::=     &lt;TOUPPER&gt; "(" ")"</p><p></p><p>StrToLower::=     &lt;TOLOWER&gt; "(" ")"</p><p></p><p>Substring::=     &lt;SUBSTRING&gt; "(" &lt;INTEGER&gt;, &lt;INTEGER&gt; ")"</p><p></p><p>TupleExp::=     TupleName "." (TupleSize  
                                |   TupleGetValue  
                                |   TupleGetElemName   
                                |   TupleGetElemType )</p><p></p><p>TupleSize::=     &lt;SIZE&gt; "(" ")"</p><p></p><p>TupleGetValue::=     &lt;GETVALUE&gt; "(" TupleElemName ")"</p><p>TupleGetElemName::=     &lt;GETELEMNAME&gt; "(" &lt;INTEGER&gt; ")"</p><p></p><p>TupleGetElemType::=     &lt;GETELEMTYPE&gt; ( "(" &lt;INTEGER&gt; ")" 
                                |   "(" &lt;STRING&gt; ")"  )</p><p></p><p>TupleName::=     &lt;ID&gt;</p><p></p><p>IterateParameterList::=     Name ":" ClassName ";" Name ":" CollectionName 
                                    &lt;EQUAL&gt; Expression " | " Expression</p><p></p><p>ParameterList::=     Expression (&lt;COMMA&gt; ParameterList)*</p><p></p><p>ObjectList::=    Object (&lt;COMMA&gt; ObjectList)*</p><p></p><p>Object::=     Name</p><p></p><p>PropertyList::=     Property (&lt;COMMA&gt; PropertyList)*</p><p></p><p>Property::=     Name</p><p></p><p>TupleElemName::=     Name</p></pre></pre></td>
                                 </tr>
                              </table>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="RefInstanceClass"></a>6.3.7 </span><span class="title">Reference to an Instance of a  Model Class</span></div>
                           <div class="body">
                              <p>ReferenceToInstance::=		&lt;FACTORY&gt;.ClassName(ParameterList )</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="LitAndIDs"></a>6.3.8 </span><span class="title">Literals and Identifiers</span></div>
                           <div class="body">
                              <p>&lt;NUMBER: 	&lt;INTEGER_LITERAL&gt; | &lt;REAL_LITERAL &gt;&gt;</p>
                              <p>&lt;INTEGER_LITERAL: 	&lt;DECIMAL_LITERAL &gt;&gt;</p>
                              <p>&lt;#DECIMAL_LITERAL: 	["1"-"9"] (["1"-"9"])*&gt;</p>
                              <p>&lt;REAL_LITERAL: 	["0"-"9"])+ "." (["0"-"9"])* (&lt;EXPONENT&gt;)? | "." (["0"-"9"])+ (&lt;EXPONENT&gt;)?   | 
                                 (["0"-"9"])+  &gt;
                              </p>
                              <p>&lt;#EXPONENT: 	["e", "E"] (["+","-"])? (["0"-"9"])+&gt;</p>
                              <p>&lt;STRING_LITERAL: 	"\&#8217;"(~["\", "\n", "\r"])*"\&#8217;" &gt;</p>
                              <p>&lt;ID:		["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"]  |  "_"(["a"-"z","A"-"Z","0"-"9"])+)* &gt;</p>
                              <p>&lt;COLLECTION_LITERAL:    "Set" | "Bag" | "Sequence"&gt;</p>
                              <p>&lt;TUPLE_LITERAL:      "Tuple&gt;</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ReservedWords"></a>6.3.9 </span><span class="title">Reserved Words</span></div>
                           <div class="body">
                              <p>&lt;BAG: &#8216;Bag"&gt;</p>
                              <p>&lt;BOOLEAN: "Boolean"&gt;</p>
                              <p>&lt;ENUM: "Enum"&gt;</p>
                              <p>&lt;INTEGER: "Integer"&gt;</p>
                              <p>&lt;REAL: "Real"&gt;</p>
                              <p>&lt;SEQUENCE: "Sequence"&gt;</p>
                              <p>&lt;SET: "Set"&gt;</p>
                              <p>&lt;STRING: "String"&gt;</p>
                              <p>&lt;SELF:  "Self"&gt;</p>
                              <p>&lt;TUPLE: "Tuple" &gt;</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Operators"></a>6.3.10 </span><span class="title">Operators</span></div>
                           <div class="body">
                              <p>&lt;AND: "&amp;"  |  "and" &gt;</p>
                              <p>&lt;ARROW: "&#8594; " &gt;</p>
                              <p>&lt;COLLECT:  "collect" &gt;</p>
                              <p>&lt;COMMA:  "," &gt;</p>
                              <p>&lt;CONCAT:  "concat" &gt;</p>
                              <p>&lt;COUNT:  "count" &gt;</p>
                              <p>&lt;DIVIDE: "/" &gt;</p>
                              <p>&lt;EXCLUDING:  "excluding" &gt;</p>
                              <p>&lt;EXISTS: "exists" &gt;</p>
                              <p>&lt;FACTORY: "factory"&gt;</p>
                              <p>&lt;FIRSTN:  "firstN" &gt;</p>
                              <p>&lt;FORALL:  "forAll" &gt;</p>
                              <p>&lt;EQUAL:  "=" &gt;</p>
                              <p>&lt;GEQ: "&gt;=" &gt;</p>
                              <p>&lt;GETELEMNAME:  "getElemName" &gt;</p>
                              <p>&lt;GETELEMTYPE:  "getElemType" &gt;</p>
                              <p>&lt;GETVALUE:  "getValue" &gt;</p>
                              <p>&lt;GT: "&gt;" &gt;</p>
                              <p>&lt;IMPLIES: "implies" &gt;</p>
                              <p>&lt;INCLUDES: "includes" &gt;</p>
                              <p>&lt;INCLUDESALL: "includesAll" &gt;</p>
                              <p>&lt;INCLUDING: "including" &gt;</p>
                              <p>&lt;INTDIV: "div" &gt;</p>
                              <p>&lt;INTERSECTION: "intersection" &gt;</p>
                              <p>&lt;ISEMPTY:  "isEmpty" &gt;</p>
                              <p>&lt;ITERATE: "iterate" &gt;</p>
                              <p>&lt;JOIN:  "join" &gt;</p>
                              <p>&lt;LASTN:  "lastN" &gt;</p>
                              <p>&lt;LEQ: "&lt;=" &gt;</p>
                              <p>&lt;LT: "&lt;" &gt;</p>
                              <p>&lt;MAX: "max" &gt;</p>
                              <p>&lt;MIN: "min" &gt;</p>
                              <p>&lt;MINUS: "-" &gt;</p>
                              <p>&lt;MOD: "mod" &gt;</p>
                              <p>&lt;NEQ:  "!="  |  "&lt;&gt;" &gt;</p>
                              <p>&lt;NEW: "new" &gt;</p>
                              <p>&lt;NOT:  "!"  |  "not" &gt;</p>
                              <p>&lt;NOTEMPTY:  "notEmpty" &gt;</p>
                              <p>&lt;OR: "|" |  |or" &gt;</p>
                              <p>&lt;REJECT:  "reject" &gt;</p>
                              <p>&lt;REVERSE: "reverse" &gt;</p>
                              <p>&lt;SELECT:  "select" &gt;</p>
                              <p>&lt;SIZE:  "size" &gt;</p>
                              <p>&lt;SORTBY: "sortBy" &gt;</p>
                              <p>&lt;SUBSTRING: "substring" &gt;</p>
                              <p>&lt;SUM: "sum" &gt;</p>
                              <p>&lt;TIMES: "*" &gt;</p>
                              <p>&lt;TOLOWER: "toLower" &gt;</p>
                              <p>&lt;TOUPPER: "toUpper"&gt;</p>
                              <p>&lt;UNION:  "union" &gt;</p>
                              <p>&lt;XOR: "*|"  | "xor" &gt;</p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="StatementOps"></a>6.3.11 </span><span class="title">Statements</span></div>
                           <div class="body">
                              <p>&lt;CONTEXT:  "context" | "Context"&gt;</p>
                              <p>&lt;ELSE:  "else" &gt;</p>
                              <p>&lt;ENDCONTEXT:  "endContext" | "EndContext"&gt;</p>
                              <p>&lt;ENDPACKAGE:  "EndPackage" | "endPackage"&gt;</p>
                              <p>&lt;ENDIF:  "endif" &gt;</p>
                              <p>&lt;IF: "If"  |  "if" &gt;</p>
                              <p>&lt;LET: "Let" | "let" &gt;</p>
                              <p>&lt;PACKAGE:  "Package" | "package"&gt;</p>
                              <p>&lt;THEN:  "then" &gt;</p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="GELLOexps"></a>6.4 </span><span class="title">GELLO Expressions</span></div>
                     <div class="body">
                        <p>A GELLO expression is any text string conforming to the definition of an expression in the GELLO language specification. GELLO
                           expressions can be used to:
                        </p>
                        <ul style="margin-left:20px;">
                           <li>Access information from a repository</li>
                           <li>Build decision criteria</li>
                           <li>Abstract or derive summary values</li>
                        </ul>
                        <p></p>
                        <p>When an expression is evaluated, the result of such evaluation is a value. The type of the result is the type of the expression.
                           
                        </p>
                        <p></p>
                        <p>Evaluation of an expression does not produce any side effects, although the returning value can be bound to a variable name
                           and used by the guideline to make decisions, control execution flow, etc. If an expression can be embedded in a conditional
                           statement, the returning value is interpreted by the application to which the conditional statement belongs. 
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="TypeOfExp"></a>6.5 </span><span class="title">Type of an Expression</span></div>
                     <div class="body">
                        <p>If an expression denotes a variable or a value, then such expression has a type that must be checked for compatibility. Such
                           variable or value must match any of GELLO predefined §&#8206;5.1.1, collection §&#8206;5.1.3 or tuple data types §&#8206;5.1.4, or classes defined
                           in the underlying data model §&#8206;5.1.2.
                        </p>
                        <p></p>
                        <p>If a value is bound to a variable name, both the returning value and the variable to which it is assigned must be of the same
                           type.
                        </p>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Termination"></a>6.6 </span><span class="title">Normal and Abrupt Completion of Evaluation</span></div>
                     <div class="body">
                        <p>Expressions are evaluated by following a series of steps. Normal completion signifies that all steps can be carried out without
                           an exception being thrown. If, however, evaluation of an expression throws an exception, the expression is said to complete
                           abruptly. GELLO provides basic error checking described in the following section.
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="TypeCheck"></a>6.6.1 </span><span class="title">Type Checking</span></div>
                           <div class="body">
                              <p>GELLO was developed as a strongly-typed language in response to the requests of the CDS TC community. Both GELLO and OCL are
                                 strongly-typed, hence consistency was maintained. Since GELLO is a strongly-typed language, it checks that the types of all
                                 expressions are valid and match one of GELLO or model data types. Similarly, GELLO checks that the operands match the required
                                 types for any given operator. In other words, if an operator is applied to an incompatible operand, the return type of the
                                 function is undefined. 
                              </p>
                           </div>
                        </div>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="Handling"></a>6.6.2 </span><span class="title">Handling Exceptions</span></div>
                           <div class="body">
                              <p>Although GELLO provides basic type checking, it does not provide any mechanisms for handling exceptions as a result of a type
                                 mismatch. The applications into which GELLO is embedded should provide the necessary error handling mechanisms.
                              </p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="EvalExps"></a>6.7 </span><span class="title">Evaluation of Expressions</span></div>
                     <div class="body">
                        <p>Expressions are evaluated from left to right. In the case of infix operators, the evaluation order is determined by the precedence
                           of the operators.
                        </p>
                        <div class="subSubSubSection">
                           <div class="header"><span class="icon"> </span><span class="number"><a name="ArgList"></a>6.7.1 </span><span class="title">Argument List</span></div>
                           <div class="body">
                              <p>Argument lists included in method invocations are evaluated left-to-right.</p>
                           </div>
                        </div>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ExampleExps"></a>6.8 </span><span class="title">Example of Expressions</span></div>
                     <div class="body">
                        <p>When the following expressions are evaluated, they return a value of type Boolean. Expressions like these can be used to build
                           decision criteria:
                        </p>
                        <table width="90%">
                           <caption>Example 131. </caption>
                           <tr>
                              <td class="example"><pre><pre><p></p>
   &#8226; calcium.notEmpty() and phosphate.notEmpty()
   &#8226; renal_failure and calcium_phosphate_product &gt;  threshold_for_osteodystrophy
						
   &#8226; Observation(select(coded_concept="C0428279") 
					 
   The expression above returns a collection of observations with a coded concept 
   equal to "C0428279". The result of an expression can be bound to a variable name 
   using the let operator:

    &#8226; let CreatinineReadings: set = Observation(select(coded_concept="C0428279")
					</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="ExampleGELLO"></a>7 </span><span class="title">Examples in GELLO</span></div>
               <div class="body">
                  <p>In this section we present some examples written in GELLO.  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="MLMGELLO"></a>7.1 </span><span class="title">An MLM into GELLO</span></div>
                     <div class="body">
                        <p>From a MLM:</p>
                        <table width="90%">
                           <caption>Example 132. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   maintenance: 
      title: Screening for elevated calcium-phosphate product;; 
   library: 
      purpose: provide an alert if the product of the blood calcium and 
         phosphorus exceeds a certain threshold in the setting of renal failure;;
      explanation: An elevated Ca-PO4 product suggests a tendency toward renal 
         osteodystrophy and predisposes to soft-tissue calcification;; 
					</pre></pre></td>
                           </tr>
                        </table>
                        <p>Example in GELLO:</p>
                        <table width="90%">
                           <caption>Example 133. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   let lastCreatinine : Observation = Observation&#8594; select(code= 
         ("SNOMED-CT", "xxxxxx")).sortedBy(efectiveTime.high).last()  
         
   let lastCalcium : Observation = Observation&#8594; select(code = 
         ("SNOMED-CT", "yyyyy")).sortedBy(efectiveTime.high).last() 
         
   let lastPhosphate : Observation = Observation&#8594; select(code= 
         ("SNOMED-CT", "zzzzz")).sortedBy(efectiveTime.high).last() 
         
   let renal_failure_threshold : PhysicalQuantity = 
         Factory.PhysicalQuantity( "2.0, mg/dl") 
   
   let threshold_for_osteodystrophy : int = 70 
   
   let renal_failure :Boolean =    if lastCreatinine &lt;&gt; null and 
         lastCreatine.value.greaterThan(renal_failure_threshold)  
      then          
         true   
      else
         false   
      Endif 
   let calcium_phosphate_product : real = if lastCalcium 
         &lt;&gt; null and lastPhosphate &lt;&gt; null 
      then   
         lastCalcium.value *  lastPhospate.value 
      else   
         -1
      endif 

   if renal_failure and calcium_phosphate_product &gt;  
         threshold_for_osteodystrophy then   
      whatever action or message 
   else   
      whatever action or message
   endif 
					</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ItExample"></a>7.2 </span><span class="title">Example of an iteration over more than one collection at a time</span></div>
                     <div class="body">
                        <p>This example shows how collection operators can be nested in expressions as long as they comply with the notation.</p>
                        <p>Statement in English (many thanks to Samson Tu):</p>
                        <p>"There exists (for a patient) an anti-hypertensive prescription (?drug) such that there exists (for the patient) a problem
                           (?problem) such that ?problem is a compelling indication for ?drug". Where: 
                        </p>
                        <ul style="margin-left:20px;">
                           <li>&#8216;a patient&#8217; is the current patient?</li>
                           <li>drug is any drug in the drug database</li>
                           <li>?problem is a patient&#8217;s problem</li>
                        </ul>
                        <p>Statement in English (many thanks to Samson Tu):</p>
                        <table width="90%">
                           <caption>Example 134. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   Presence of Azotemia Observation within last three months : Assumptions: 
         1. The data model has as code a generic term such as 
             SNOMED "finding" ("246188002") and the value slot has 
             the code for Azotemia. 
         2. For a diagnosis such as azotemia, the effective time is the time 
             interval during which the disease is thought to be present. 
         3. A PointInTime.NOW() function returns the current time 
 
   Example in GELLO: 
      Let month : CodedValue = Factory.CodedValue(""SNOMED-CT", "258706009"")  
      Let finding : CodedValue = Factory.CodedValue("SNOMED-CT", "246188002") 
      Let azotemia : CodedValue = Factory.CodedValue ("SNOMED-CT", "371019009")
      Observation &#8594; exists(code.equal(finding) and value.implies(azotemia) and 
              effective_time.intersect(ThreeMonthsAgo, PointInTime.NOW())) 
						</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="ExampleNumber"></a>7.3 </span><span class="title">Example: Number of current anti-hypertensive Medications &gt; 1</span></div>
                     <div class="body">
                        <p>Statement in English (many thanks to Samson Tu):</p>
                        <p>Number of current anti-hypertensive Medications &gt; 1</p>
                        <p></p>
                        <table width="90%">
                           <caption>Example 135. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   Example in GELLO: 
      Let hypotensive_agents : CodedValue = 
            Factory.CodedValue("SNOMED-CT", "1182007")  
            
      MedicationOrder&#8594; select(code.(hypotensive_agents) and 
            effectiveTime.high = null)&#8594; size() &gt; 1  
            
      MedicationOrder&#8594;select(code.implies(hypotensive_agents) and 
            effectiveTime.high = null)&#8594;size() &gt; 1 
 					</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Example3rdDose"></a>7.4 </span><span class="title">3rd Td dose before 12 months of age</span></div>
                     <div class="body">
                        <p>Statement in English (many thanks to Samson Tu):</p>
                        <p>3rd Td dose before 12 months of age </p>
                        <p></p>
                        <table width="90%">
                           <caption>Example 136. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   Example in GELLO:
      Let month : CodedValue = Factory.CodedValue("SNOMED-CT", "258706009"")
      
      Let DOBcode : CodedValue = Factory.CodedValue ("SNOMED-CT", "184099003")
      
      Let DateOfBirth : Observation= Factory.Observation&#8594; select( 
            code.equal(DOBCode)).sortedBy(effectiveTime.high).last()
            
      Let TwelveMonthsOfAge : PointInTime = Factory.PointInTime(
            DateOfBirth.effectiveTime.high.plus(12, month)) 
            
      Let Td :CodedValue = Factory.CodedValue("SNOMED-CT", "59999009")
      
      Let ThirdTdDose : SubstanceAdministration = Factory.SubstanceAdministration&#8594; 
            select(code.implies(Td)).sortedBy(effectiveTime.high)).third() 
            ThirdTdDose.effectiveTime.high.before(TwelveMonthsOfAge) 
					</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="GroupingGELLOexpressionsintoModelProcesses"></a>8 </span><span class="title">Grouping GELLO expressions into Model Processes</span></div>
               <div class="body">
                  <p>
                     GELLO expressions can be grouped into &#8216;Model processes&#8217; to perform user-defined operations upon given classes of the data
                     model for a specific purpose.
                     			
                  </p>
                  <p></p>
                  <p>
                     A model process must be defined as an attribute of a stereotype class which could be:
                     					
                     <ol>
                        <li>a user-defined class independent of the data model, </li>
                        <li>a class dependent of a class in the data model. The latter being the &#8216;metaclass&#8217; to which the user-defined stereotype class
                           relates to. In this case the stereotype class must follow the UML class hierarchy definition <a href="http://www.omg.org/docs/formal/03-03-01.pdf">(UML-OMG v1.5 p2-75)</a></li>
                     </ol>
                  </p>
                  <p></p>
                  <p>
                     In both cases the names of new stereotypes must not clash with the names of predefined classes in the data model. The stereotype
                     class should not affect any of the properties of the classes in the data model, but rather,  to extend such properties adding
                     extra functionality. 
                     
                  </p>
                  <p></p>
                  <p>
                     Stereotypes may be assembled into &#8216;profiles&#8217; &#8211;or libraries. A profile is a stereotyped package containing user-defined stereotype
                     model elements customized for a specific domain or purpose <a href="http://i12www.ilkd.uni-karlsruhe.de/~baar/oclworkshopUml03/papers/10_combined_model_processing.pdf">(OCL/UML)</a>. In the following example, Package P1 is the profile where we assembled the stereotypes S1 and S2 dependent on C1 and C2
                     respectively. Both C1 and C2 are classes from the data model and hence S1 and S2 add extended functionality to those classes.
                     			
                  </p>
                  <table width="90%">
                     <caption>Example 137. </caption>
                     <tr>
                        <td class="example"><pre><pre>
  
         Package P1
               Class C1
               Class S1&lt;&lt;stereotype&gt;&gt;
               Class C2
               Class S2&lt;&lt;stereotype&gt;&gt;

					</pre></pre></td>
                     </tr>
                  </table>
                  <p>
                     In the following example, S3 is a stereotype independent of the data model located in Package P2:
                     
                  </p>
                  <table width="90%">
                     <caption>Example 138. </caption>
                     <tr>
                        <td class="example"><pre><pre>
  
         Package P2
               Class S3 &lt;&lt;stereotype&gt;&gt;
 
					</pre></pre></td>
                     </tr>
                  </table>
                  <p>
                     				As with all GELLO expressions, all model processes must be side-effect free, that is, they should not change the state
                     of the modeled system.
                     				
                  </p>
                  <p>
                     				The exhibit below is the UML representation for a user-defined stereotype class as an extension of a Model Class. 
                  </p>
                  <p>
                     <table width="90%" id="UserDefStereotypeExtModelClass">
                        <tr>
                           <td class="figure"><pre><br /><img class="graphic" src="graphics/UserDefinedAndMetaclass.gif" alt="UserDefinedAndMetaclass.gif" /><br /><br /></pre></td>
                        </tr>
                     </table>
                  </p>
                  <p></p>
                  <p>The exhibit below is an example of the user-defined Azotemia3months as a stereotype class related to the model class Observation.
                     CheckAzotemia is the model process containing the GELLO expressions that evaluate whether a patient has suffered from azotemia
                     within the past 3 months.
                     				
                  </p>
                  <p>
                     <table width="90%" id="UserDefAzotemia">
                        <tr>
                           <td class="figure"><pre><br /><img class="graphic" src="graphics/AzotemiaModelProcessExample.gif" alt="AzotemiaModelProcessExample.gif" /><br /><br /></pre></td>
                        </tr>
                     </table>
                  </p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="Ack"></a>9 </span><span class="title">Acknowledgements</span></div>
               <div class="body">
                  <p>We would like to thank Gunther Schadow, Grahame Grieve, Dale Nelson, Bob Dolin, Anthony Malia, Mor Peleg, and Eclipsys Corporation
                     for their valuable comments.
                  </p>
                  <p>Support for this project has been provided by the CKBP grant and Partners Information Systems.</p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="References"></a>10 </span><span class="title">References</span></div>
               <div class="body">
                  <p><a href="http://dsg.bwh.harvard.edu/public_html/msordo/pubs/GELLOWhitePaperV1.2.pdf">&#8226; Speaking the same language: sharing clinical knowledge with GELLO expression language. White Paper v 1.2. Decision Systems
                        Group, Harvard Medical School. December 2004.</a></p>
                  <p><a href="http://www.hl7.org/Library/data-model/RIM/modelpage_mem.htm">
                        			&#8226; HL7 RIM   
                        		</a></p>
                  <p><a href="http://www.hl7.org/Library/data-model/RIM/C30202/rim.htm">
                        			&#8226; HL7 RIM information model
                        		</a></p>
                  <p><a href="http://www.omg.org/docs/formal/03-03-01.pdf">
                        			&#8226; UML-OMG v1.5
                        			    </a></p>
                  <p><a href="http://i12www.ilkd.uni-karlsruhe.de/~baar/oclworkshopUml03/papers/10_combined_model_processing.pdf">
                        			&#8226; Combining OCL and Programming Languages for UML Model Processing
                        			   </a></p>
                  <p><a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=11825198&amp;dopt=Abstract">
                        			&#8226; A virtual medical record for guideline-based decision support. 
                        		</a></p>
                  <p><a href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&amp;db=PubMed&amp;list_uids=11825198&amp;dopt=Abstract">			
                        			&#8226; The Virtual Medical Record (vMR) 
                        		</a></p>
                  <p><a href="http://smi-web.stanford.edu/people/tu/HL7/HL7SanDiegoJan2002.txt">			
                        			&#8226; Minute from HL7 CDS TC  San Diego, CA, January 2002.
                        		</a></p>
                  <p><a href="http://dsg.bwh.harvard.edu/~msordo/GELLO/GELLClassesBNF.rtf">
                        				&#8226; [DSG02-01] 
                        				   BNF and built-in classes for object-oriented guideline expression language (GELLO). </a></p>
                  <p><a href="http://dsg.bwh.harvard.edu/~msordo/GELLO/Arden_GLIF_May_2001_AB.ppt">
                        			  &#8226; [TC1]   Harmonization of Arden&#8217;s expression syntax and the RIM
                        		</a></p>
                  <p><a href=" http://dsg.bwh.harvard.edu/~msordo/gello/gello.ppt">
                        			&#8226; [TC2]  Expression and query languages
                        		</a></p>
                  <p><a href="http://www.hl7.org/library/committees/dss/minutes/expr-lang-boxwala-10-2001.ppt">
                        &#8226; [TC3]  Progress on Guideline Expression Language
                        		</a><a href="http://dsg.bwh.harvard.edu/~msordo/gello/slc.ppt">
                        			also here 
                        		</a></p>
                  <p><a href="http://www.hl7.org/library/committees/dss/minutes/gelloupdate2-W2002.ppt">
                        				&#8226;  [TC4]  Progress on Object-Oriented Guideline Expression Language (GELLO)
                        		</a><a href="http://dsg.bwh.harvard.edu/~msordo/gello/gelloupdate.ppt">
                        			Also here
                        		</a></p>
                  <p><a href="http://dsg.bwh.harvard.edu/~msordo/gello/GELLO_may02.ppt">	
                        				&#8226; [TC5]  The GELLO Report.  
                        				2002 Spring WGM
                        		</a></p>
                  <p><a href="http://cslxinfmtcs.csmc.edu/hl7/arden/HL7GELLOUpdate_1002.ppt">
                        &#8226; [TC6]  GELLO Update.  HL7 Meeting, Baltimore,  October 2002
                        		</a></p>
                  <p><a href="http://www.omg.org/cgi-bin/doc?ptc/03-10-14.pdf">
                        			&#8226; UML 2.0 OCL 
                        		</a></p>
                  <p><a href="http://www.dmi.columbia.edu/homepages/wandong/homepage20030805_files/GESDOR.htm">
                        			&#8226; Guideline Execution Model 
                        		</a></p>
                  <p><a href="http://www.w3.org/TR/2003/WD-owl-ref-20030221/">
                        				&#8226; OWL latest work in progress report
                        		</a></p>
                  <p><a href="http://www.w3.org/TR/owl-guide/wine.rdf">
                        			&#8226; Example of an OWL ontology.
                        		</a></p>
                  <p><a href="http://www.w3.org/TR/">
                        			&#8226; Current W3C recommendations and technical documents
                        		</a></p>
                  <p><a href="../../infrastructure/itsuml/datatypes-its-uml.htm#">&#8226; UML ITS data model</a></p>
                  <p><a href="">
                        			&#8226; [GR04] </a> Design of a Standards-Based External Rules Engine for Decision Support
                     in a Variety of Application Contexts: Report of a Feasibility Study at Partners 
                     			   HealthCare System. 
                     			  To appear at Symposium of the Medical Informatics Association (MedInfo), September, 2004
                     			
                  </p>
               </div>
            </div>
            <hr title="Separator from footer" />
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="annexA"></a>A </span><span class="title">Annex A: HL7v3DataTypes</span></div>
               <div class="body">
                  <p>
                     <table width="90%">
                        <tr>
                           <td class="figure"><pre><br /><img class="graphic" src="graphics/HL7v3DataTypes.gif" alt="HL7v3DataTypes.gif" /><br /><br /></pre></td>
                        </tr>
                     </table>
                  </p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="annexB"></a>B </span><span class="title">Annex B: The HL7 Reference Information Model</span></div>
               <div class="body">
                  <p><b><a class="elink" href="../../infrastructure/rim/rim.htm#RIM-CoreGraphics">THIS IS THE SECTION WHERE THE DIAGRAM IS----- RIM FoundationClasses Subject Area</a></b></p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="annexC"></a>C </span><span class="title">Annex C: The core UML OCL kernel declarations</span></div>
               <div class="body">
                  <table width="90%">
                     <tr>
                        <td class="figure"><pre><br /><img class="graphic" src="graphics/uml-its-main.gif" alt="uml-its-main.gif" /><br /><br /></pre></td>
                     </tr>
                  </table>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="annexD"></a>D </span><span class="title">Annex D: A Simplified Data Model</span></div>
               <div class="body">
                  <p>The following is a simplified data model included in this specification so examples of GELLO operators and operations can
                     be illustrated and easily followed. The model upon which the simplified data model is based is the result of a feasibility
                     study which reviewed various decision support systems within Brigham &amp; Women&#8217;s Hospital and Massachusetts General Hospital
                     [GR04]. The simplified data model consists of 5 model classes, each of which holds some properties that can be mapped into
                     the HL7 RIM. These 5 classes and their equivalent in the RIM are showed in Table 1.
                  </p>
                  <table width="90%" cellspacing="0" cellpadding="5" border="1" style="border-color:blue">
                     <tr>
                        <th colspan="1">Classes in the Data Model</th>
                        <th colspan="1">Equivalent Classes in the HL7 RIM</th>
                     </tr>
                     <tr>
                        <td colspan="1">Patient</td>
                        <td colspan="1">Person in the role of Patient</td>
                     </tr>
                     <tr>
                        <td colspan="1">LabResult</td>
                        <td colspan="1">Observation</td>
                     </tr>
                     <tr>
                        <td colspan="1">ProblemLIst</td>
                        <td colspan="1">Observation</td>
                     </tr>
                     <tr>
                        <td colspan="1">Allergy</td>
                        <td colspan="1">Observation</td>
                     </tr>
                     <tr>
                        <td colspan="1">Medication</td>
                        <td colspan="1">Substance Administration</td>
                     </tr>
                  </table>
                  <p>Figure below depicts the data model. Each class includes some properties equivalent to those found in the RIM. The data model
                     is by no means extensive. This data model will be used along the document to exemplify the use of GELLO operators in expressions
                     in a simple manner.
                  </p>
                  <table width="90%">
                     <tr>
                        <td class="figure"><pre><br /><img class="graphic" src="graphics/MiniVMRforExamplesInSpecs.gif" alt="MiniVMRforExamplesInSpecs.gif" /><br /><br /></pre></td>
                     </tr>
                  </table>
                  <p>When referencing RIM classes directly more complex expressions can be written. Such expressions may include references to
                     mood, and class code, in accordance with the HL7 RIM specification.
                  </p>
               </div>
            </div>
            <div class="subSection">
               <!--divN/head-->
               <div class="header"><span class="icon"> </span><span class="number"><a name="annexE"></a>E </span><span class="title">Annex E: Temporal Relations and Temporal Intervals</span></div>
               <div class="body">
                  <p>It is assumed that the HL7 v3 Data Types provides all 13 operators for handling Allen relations on temporal intervals. Such
                     operators can be used in GELLO expressions referring to the appropriate model class and method. The 13 operators are described
                     below for clarity.
                  </p>
                  <p></p>
                  <p>A time interval is a set of consecutive time-stamps values during which the given information is expected to be valid. As
                     defined in HL7 V3 Data Types (p 100), a time interval can be open or closed, infinite or undefined on either side. Graphic
                     examples of temporal relations are depicted in Figure 2. There are thirteen fundamental relations, known as the Allen primitives,
                     between pairs of time intervals.
                  </p>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="before"></a>E.1 </span><span class="title">Before</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 139. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   before(interval1,interval2).  
 
Types of "before" 
   (timeInterval x timeInterval) &#8594; Boolean 
 
Definition of evaluation function for Fbefore(IVL1,IVL2) 
 Fbefore(IVL,IVL) = true      If IVL1 and IVL2 are both time intervals and the 
                              end-point of interval1 occurs strictly earlier 
                              than the start-point of interval2. 
                  = false     Else if IVL1 and IVL2 are both time intervals 
                              and the end-point of interval1 does not occur 
                              strictly earlier than the start-point of interval2. 
                  = undefined otherwise 
					</pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="after"></a>E.2 </span><span class="title">After</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 140. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   after(interval1,interval2).  
 
Types of "after" 
   (timeInterval x timeInterval) &#8594; Boolean 
 
Definition of evaluation function for Fafter(IVL1,IVL2)
Fafter(IVL,IVL) = true         If IVL1 and IVL2 are both time intervals and 
                               the start-point of interval1 occurs (starts) after 
                               the end-point of interval2. 
                = false        Else if IVL1 and IVL2 are both time intervals and 
                               the start-point of interval1 does not occur after 
                               the end-point of interval2. 
                = undefined    otherwise 
					  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Meets"></a>E.3 </span><span class="title">Meets</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 141. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   meets(interval1,interval2).  
 
Types of "meets" 
   (timeInterval x timeInterval) &#8594; Boolean 
 
Definition of evaluation function for Fmeets(IVL1,IVL2) 
Fmeets(IVL,IVL) = true          If IVL1 and IVL2 are both time intervals and 
                                 the end-point of interval1 is simultaneous with 
                                 the start-point of interval2. 
                = false          Else if IVL1 and IVL2 are both time intervals and 
                                 end-point of interval1 is not simultaneous with 
                                 the start-point of interval2.
                = undefined      otherwise 
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="MetBy"></a>E.4 </span><span class="title">Met-By</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 142. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   met-by(interval1,interval2).  
 
Types of "met-by" 
    (timeInterval x timeInterval) &#8594; Boolean

Definition of evaluation function for Fmet-by(IVL1,IVL2)
Fmet-by(IVL,IVL) = true      If IVL1 and IVL2 are both time intervals and the 
                             start-point of interval1 is simultaneous with the 
                             end-point of interval2.
                = false      Else if IVL1 and IVL2 are both time intervals and 
                             start-point of interval1 is not simultaneous with 
                             the end-point of interval2.
                = undefined  otherwise
				  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Overlaps"></a>E.5 </span><span class="title">Overlaps</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 143. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   overlaps(interval1,interval2). 
 
Types of "overlaps"
    (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Foverlaps(IVL1,IVL2)
Foverlaps(IVL,IVL) = true        If IVL1 and IVL2 are both time intervals and 
                                 the start-point of interval1 is earlier than  
                                 the start-point of interval2, but the end-point 
                                 of interval1 occurs strictly between the 
                                 start- and end-points of interval2.
                   = false       Else if IVL1 and IVL2 are both time intervals 
                                 and start-point of interval1 is not earlier 
                                 than the start-point of interval2, or  the 
                                 end-point of interval1 does not ocurr
                                 strictly between the start- and 
                                 end-points of interval2.
                   = undefined  otherwise
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="overlapped"></a>E.6 </span><span class="title">Overlapped-by</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 144. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   overlapped-by(interval1,interval2). 
 
Types of "overlapped-by"
   (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Foverlapped-by(IVL1,IVL2)
Foverlapped-by(IVL,IVL) = true        If IVL1 and IVL2 are both time intervals 
                                      and the start-point of interval1 occurs 
                                      between the start- and end-points of 
                                      interval2, but the end-point of interval1 
                                      occurs later than the end-point of interval2.
                        = false       Else if IVL1 and IVL2 are both time intervals 
                                      and the start-point of interval1 does not 
                                      occur between the start- and end-points 
                                      of interval2, or the end-point of interval1 
                                      occurs before the end-point of interval2.
                        = undefined   otherwise
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Starts"></a>E.7 </span><span class="title">Starts</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 145. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   starts(interval1,interval2). 
Types of "starts"
   (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Fstarts(IVL1,IVL2)
Fstarts(IVL,IVL) = true       If IVL1 and IVL2 are both time intervals and the 
                               start-point of interval1 occurs simultaneously 
                               with the start-point of interval2, but the 
                               end-point of interval1 occurs before the
                               end-point of interval2.
                 = false       Else if IVL1 and IVL2 are both time intervals 
                               and the start-point of interval1 does not occur 
                               simultaneously with the start-point of interval2, 
                               or the end-point of interval1 occurs after the
                               end-point of interval2.
                 = undefined   otherwise
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="StartedBy"></a>E.8 </span><span class="title">Started-by</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 146. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   started-by(interval1,interval2). 
 
Types of "started-by"
    (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Fstarted-by(IVL1,IVL2)
Fstarted-by(IVL,IVL) = true        If IVL1 and IVL2 are both time intervals and
                                   the start-point if interval1 is simultaneous 
                                   with the start-point of interval2, but the 
                                   end-point of interval1 occurs later than the 
                                   end-point of interval2.
                     = false       Else if IVL1 and IVL2 are both time 
                                   intervals and the start-point if interval1 is 
                                   not simultaneous with the start-point of 
                                   interval2, or the end-point of interval1 
                                   occurs before the end-point of interval2.
                     = undefined   otherwise
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="During"></a>E.9 </span><span class="title">During</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 147. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   during(interval1,interval2). 
					<p></p>
Types of "during"
   (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Fduring(IVL1,IVL2)
Fduring(IVL,IVL) = true         If IVL1 and IVL2 are both time intervals and  
                                the start-point of interval1 occurs after the 
                                start-point of interval2 and the end-point of 
                                interval1 occurs earlier than the end-point 
                                of interval2.
                 = false        Else if IVL1 and IVL2 are both time intervals 
                                but the start-point of interval1 occurs before 
                                the start-point of interval2 or the end-point of 
                                interval1 occurs later than the end-point of 
                                interval2.
                 = undefined    otherwise
					 </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Contains"></a>E.10 </span><span class="title">Contains</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 148. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   contains(interval1,interval2). 
 
Types of "contains"
   (timeInterval x timeInterval) &#8594; Boolean

Definition of evaluation function for Fcontains(IVL1,IVL2)
Fcontains(IVL,IVL) = true         If IVL1 and IVL2 are both time intervals and 
                                  the start-point of interval1 is earlier than the 
                                  start-point of interval2, and the end of interval1 
                                  occurs later than the end-point of interval2.
                   = false        Else if IVL1 and IVL2 are both time intervals but 
                                  the start-point of interval1 is later than the 
                                  start-point of interval2, or the end of interval1  
                                  occurs earlier than the end-point of interval2.
                   = undefined    otherwise
					  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Finishes"></a>E.11 </span><span class="title">Finishes</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 149. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   finishes(interval1,interval2). 
 
Types of "finishes"
   (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Ffinishes(IVL1,IVL2)
Ffinishes(IVL,IVL) = true         If IVL1 and IVL2 are both time intervals and 
                                  the end-point of interval1 is simultaneous with 
                                  the end-point of interval2, but the start-point  
                                  of interval1 is later than the start-point of 
                                  interval2.
                   = false        Else if IVL1 and IVL2 are both time intervals 
                                  but the end-point of interval1is not 
                                  simultaneous with the end-point of interval2, 
                                  or the start-point of interval1 is earlier than the 
                                  start-point of interval2.
                   = undefined    otherwise
					  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="FinishedBy"></a>E.12 </span><span class="title">Finished-by</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 150. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   finished-by(interval1,interval2). 
 
Types of "finished-by"
    (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Ffinished-by(IVL1,IVL2)
Ffinished-by(IVL,IVL) = true         If IVL1 and IVL2 are both time intervals and
                                     the end-point of interval1 is simultaneous with 
                                     the end-point of interval2, but the start-point of 
                                     interval1 is earlier than the start-point of interval2.
                      = false        Else if IVL1 and IVL2 are both time intervals but the 
                                     end-point of interval1 is not simultaneous with 
                                     the end-point of interval2, or  the start-point of 
                                     interval1 is later than the start-point of interval2.
                      = undefined    otherwise
					  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <div class="subSubSection">
                     <div class="header"><span class="icon"> </span><span class="number"><a name="Equals"></a>E.13 </span><span class="title">Equals</span></div>
                     <div class="body">
                        <p>The notation is: </p>
                        <table width="90%">
                           <caption>Example 151. </caption>
                           <tr>
                              <td class="example"><pre><pre>
   equals(interval1,interval2). 
 
Types of "equals"
   (timeInterval x timeInterval) &#8594; Boolean
 
Definition of evaluation function for Fequals(IVL1,IVL2)
Fequals(IVL,IVL) = true        If IVL1 and IVL2 are both time intervals and the 
                               start- and end-points of both interval1 and 
                               interval2 are respectively simultaneous.
                 = false       Else if IVL1 and IVL2 are both time intervals 
                               but the start- and end-points of both interval1 
                               and interval2 respectively are not simultaneous.
                 = undefined   otherwise
					  </pre></pre></td>
                           </tr>
                        </table>
                     </div>
                  </div>
                  <p>
                     <table width="90%">
                        <tr>
                           <td class="figure"><pre><br /><img class="graphic" src="graphics/temporalRelations.gif" alt="temporalRelations.gif" /><br /><br /></pre></td>
                        </tr>
                     </table>
                  </p>
               </div>
            </div>
         </div>
         <p>
            <table>
               <tbody>
                  <tr>
                     <td><a class="custombutton" href="#top">Return to top of page</a></td>
                  </tr>
               </tbody>
            </table>
         </p>
      </div>
   </body>
</html>